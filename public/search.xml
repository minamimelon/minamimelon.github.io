<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BSGS学习记录-POJ 3696 The Luckiest number</title>
    <url>/20210312/BSGS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-POJ%203696%20The%20Luckiest%20number/</url>
    <content><![CDATA[<h2 id="bsgs">BSGS</h2>
<p>BSGS（baby-step giant-step），即大步小步算法。常用于求解离散对数问题。形式化地说，该算法可以在 <span class="math inline">\(O(\sqrt{p})\)</span> 的时间内求解</p>
<p><span class="math display">\[
a^x \equiv b \pmod p
\]</span></p>
<p>其中 <span class="math inline">\(a\perp p\)</span>。方程的解 <span class="math inline">\(x\)</span> 满足 <span class="math inline">\(0 \le x &lt; p\)</span>。（在这里需要注意，只要 <span class="math inline">\(a\perp p\)</span> 就行了，不要求 <span class="math inline">\(p\)</span> 是素数）</p>
<h3 id="算法描述">算法描述</h3>
<p>令 <span class="math inline">\(x = A \left \lceil \sqrt p \right \rceil - B\)</span>，其中 <span class="math inline">\(0\le A,B \le \left \lceil \sqrt p \right \rceil\)</span>，则有 <span class="math inline">\(a^{A\left \lceil \sqrt p \right \rceil -B} \equiv b \pmod p\)</span>，稍加变换，则有 <span class="math inline">\(a^{A\left \lceil \sqrt p \right \rceil} \equiv ba^B \pmod p\)</span>。</p>
<p>我们已知的是 <span class="math inline">\(a,b\)</span>，所以我们可以先算出等式右边的 <span class="math inline">\(ba^B\)</span> 的所有取值，枚举 <span class="math inline">\(B\)</span>，用 <code>hash</code>/<code>map</code> 存下来，然后逐一计算 <span class="math inline">\(a^{A\left \lceil \sqrt p \right \rceil}\)</span>，枚举 <span class="math inline">\(A\)</span>，寻找是否有与之相等的 <span class="math inline">\(ba^B\)</span>，从而我们可以得到所有的 <span class="math inline">\(x\)</span>，<span class="math inline">\(x=A \left \lceil \sqrt p \right \rceil - B\)</span>。</p>
<p>注意到 <span class="math inline">\(A,B\)</span> 均小于 <span class="math inline">\(\left \lceil \sqrt p \right \rceil\)</span>，所以时间复杂度为 <span class="math inline">\(\Theta\left (\sqrt p\right )\)</span>，用 <code>map</code> 则多一个 <span class="math inline">\(\log\)</span>。</p>
<p>上述介绍在<a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh"><strong>CC BY-SA 4.0</strong></a> 和 <a href="https://github.com/zTrix/sata-license"><strong>SATA</strong></a>条款下，转自<a href="https://oi-wiki.org/math/bsgs/">OIWIKI</a></p>
<h2 id="p3846-tjoi2007-可爱的质数">P3846 [TJOI2007] 可爱的质数</h2>
<p>模板 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">unordered_map&lt;ll,ll&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ll p,a,b;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;p,&amp;a,&amp;b);</span><br><span class="line">	ll sqp=<span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(p));<span class="comment">//square root of p</span></span><br><span class="line">	ll rs=b,ap=<span class="number">1</span>,ls=<span class="number">1</span>;<span class="comment">//rs/ls: right/left side</span></span><br><span class="line">	<span class="comment">//ap: sqp-th power of a</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=sqp;++i)&#123;</span><br><span class="line">		rs=(rs*a)%p;</span><br><span class="line">		ap=(ap*a)%p;</span><br><span class="line">		mp[rs]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=sqp;++i)&#123;</span><br><span class="line">		ls=(ls*ap)%p;<span class="comment">// ls=a^&#123;i*\sqrt&#123;p&#125;&#125;</span></span><br><span class="line">		<span class="keyword">if</span>(mp[ls])&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,((i*sqp-mp[ls])%p+p)%p);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;no solution&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="poj-the-luckiest-number">POJ The Luckiest number</h2>
<p>求 <span class="math inline">\(\underbrace{888 \cdots88}_{\text{x个}}\equiv 0\space (mod\space L)最小的符合条件的正整数x\)</span>.</p>
<p>即 <span class="math inline">\((10^x-1) \cdot\frac{8}{9}\equiv0\space(mod\space L)\)</span></p>
<p><span class="math inline">\(9n|8(10^x-1)\)</span></p>
<p><span class="math inline">\(\because gcd(8,9)=1,gcd(\frac{n}{gcd(L,8)},\frac{L}{gcd(L,8)})=1\)</span></p>
<p><span class="math inline">\(\therefore 10^x\equiv1(mod\space \frac{9n}{gcd(L,8)})\)</span></p>
<p>注意到与此时x应严格大于0，在处理时，不能使 <span class="math inline">\(x=A \left \lceil \sqrt p \right \rceil - B\)</span> （<span class="math inline">\(a^{A\left \lceil \sqrt p \right \rceil} \equiv ba^B \pmod p\)</span>）的B不能为<span class="math inline">\(\left \lceil \sqrt p \right \rceil\)</span>，第一次循环处理到<span class="math inline">\(\left \lceil \sqrt p \right \rceil-1\)</span>.</p>
<p>时间复杂度<span class="math inline">\(O(\sqrt L)\)</span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 150000</span></span><br><span class="line">ll hs[N],nxt[N],hd[N],val[N];</span><br><span class="line">ll cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(ll x,ll v)</span></span>&#123;</span><br><span class="line">	ll p=x%N;</span><br><span class="line">	hs[++cnt]=x;</span><br><span class="line">	val[cnt]=v;</span><br><span class="line">	nxt[cnt]=hd[p];</span><br><span class="line">	hd[p]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">fd</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	ll p=x%N;</span><br><span class="line">	<span class="keyword">for</span>(ll i=hd[p];i!=<span class="number">-1</span>;i=nxt[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(hs[i]==x)&#123;</span><br><span class="line">			<span class="keyword">return</span> val[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll __gcd(ll a,ll b)&#123;</span><br><span class="line">	<span class="keyword">return</span> b==<span class="number">0</span>?a:__gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">mul</span><span class="params">(ll a,ll b,ll c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a&lt;b)&#123;</span><br><span class="line">		<span class="built_in">swap</span>(a,b);</span><br><span class="line">	&#125;</span><br><span class="line">	ll ret=<span class="number">0</span>,tmp=a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;</span><br><span class="line">			ret+=tmp;</span><br><span class="line">			<span class="keyword">if</span>(ret&gt;=c) ret-=c;	</span><br><span class="line">		&#125;</span><br><span class="line">		tmp&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(tmp&gt;=c) tmp-=c;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">return</span> ret%c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ll n;</span><br><span class="line">	ll cs=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n),n)&#123;</span><br><span class="line">		cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(hd,<span class="number">-1</span>,<span class="keyword">sizeof</span> hd);</span><br><span class="line">		ll p=<span class="number">9</span>*n/__gcd(n,<span class="number">8ll</span>),a=<span class="number">10</span>,b=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(__gcd(p,a)!=<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Case %lld: 0\n&quot;</span>,++cs);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ll sqp=<span class="built_in">ceil</span>(<span class="built_in">sqrt</span>((<span class="keyword">double</span>)p));<span class="comment">//square root of p</span></span><br><span class="line">		ll rs=b,ap=<span class="number">1</span>,ls=<span class="number">1</span>;<span class="comment">//rs/ls: right/left side</span></span><br><span class="line">		<span class="comment">//ap: sqp-th power of a</span></span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;sqp;++i)&#123;</span><br><span class="line">			rs=(rs*a)%p;</span><br><span class="line">			ap=(ap*a)%p;</span><br><span class="line">			<span class="built_in">ins</span>(rs,i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(sqp) ap=(ap*a)%p;</span><br><span class="line">		<span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=sqp;++i)&#123;</span><br><span class="line">			ls=<span class="built_in">mul</span>(ls,ap,p);<span class="comment">// ls=a^&#123;i*\sqrt&#123;p&#125;&#125;</span></span><br><span class="line">			ll j;</span><br><span class="line">			<span class="keyword">if</span>((j=<span class="built_in">fd</span>(ls))!=<span class="number">-1</span>)&#123;</span><br><span class="line">				f=<span class="number">1</span>;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;Case %lld: %lld\n&quot;</span>,++cs,((i*sqp-j)%p+p)%p);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!f)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Case %lld: 0\n&quot;</span>,++cs);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外本题还有另一种解法</p>
<p>易证:<span class="math inline">\(a\perp n, a^x \equiv 1(mod\space n)\)</span>的最小整数解使<span class="math inline">\(\varphi(n)\)</span>的约数，枚举约数即可。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line">ll __gcd(ll a,ll b)&#123;</span><br><span class="line">	<span class="keyword">return</span> b==<span class="number">0</span>?a:__gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">mul</span><span class="params">(ll a,ll b,ll c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a&lt;b)&#123;</span><br><span class="line">		<span class="built_in">swap</span>(a,b);</span><br><span class="line">	&#125;</span><br><span class="line">	ll ret=<span class="number">0</span>,tmp=a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;</span><br><span class="line">			ret+=tmp;</span><br><span class="line">			<span class="keyword">if</span>(ret&gt;=c) ret-=c;	</span><br><span class="line">		&#125;</span><br><span class="line">		tmp&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(tmp&gt;=c) tmp-=c;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">return</span> ret%c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b,ll c)</span></span>&#123;</span><br><span class="line">	ll ret=<span class="number">1</span>,tmp=a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;</span><br><span class="line">			ret=<span class="built_in">mul</span>(ret,tmp,c);</span><br><span class="line">		&#125;</span><br><span class="line">		tmp=<span class="built_in">mul</span>(tmp,tmp,c);</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret%c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ll n;</span><br><span class="line">	ll cs=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n),n)&#123;</span><br><span class="line">		ll p=<span class="number">9</span>*n/__gcd(n,<span class="number">8ll</span>);</span><br><span class="line">		<span class="keyword">if</span>(__gcd(p,<span class="number">10</span>)!=<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Case %lld: 0\n&quot;</span>,++cs);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ll fai=p,t=p,r=<span class="built_in">sqrt</span>(p);</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">2</span>;i&lt;=r;++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(t%i==<span class="number">0</span>)&#123;</span><br><span class="line">				fai=fai/i*(i<span class="number">-1</span>);</span><br><span class="line">				t/=i;</span><br><span class="line">				<span class="keyword">while</span>(t%i==<span class="number">0</span>)&#123;</span><br><span class="line">					t/=i;</span><br><span class="line">				&#125;	</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(t&gt;<span class="number">1</span>)&#123;</span><br><span class="line">			fai=fai/t*(t<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		r=<span class="built_in">sqrt</span>(fai);</span><br><span class="line">		ll ans=<span class="number">1e18</span>;</span><br><span class="line">		<span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=r;++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(fai%i==<span class="number">0</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">qpow</span>(<span class="number">10</span>,i,p)==<span class="number">1</span>)&#123;</span><br><span class="line">					ans=<span class="built_in">min</span>(ans,i);</span><br><span class="line">					f=<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">qpow</span>(<span class="number">10</span>,fai/i,p)==<span class="number">1</span>)&#123;</span><br><span class="line">					ans=<span class="built_in">min</span>(ans,fai/i);</span><br><span class="line">					f=<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Case %lld: %lld\n&quot;</span>,++cs,f?ans:<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>BZOJ1034[ZJOI2008]泡泡堂</title>
    <url>/20171016/BZOJ1034%5BZJOI2008%5D%E6%B3%A1%E6%B3%A1%E5%A0%82/</url>
    <content><![CDATA[<p>一开始是不会的，不知道如何处理相等的情况，瞎贪心一直WA。 于是就递归处理是让相等的平局还是输掉，如下，拿到了50分。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b,<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;i&lt;=n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]&gt;b[l])</span><br><span class="line">			ans+=<span class="number">2</span>,++l;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a[i]&lt;b[l])</span><br><span class="line">			--r;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			ans+=<span class="built_in">max</span>(<span class="built_in">solve</span>(a,b,i+<span class="number">1</span>,l+<span class="number">1</span>,r)+<span class="number">1</span>,<span class="built_in">solve</span>(a,b,i+<span class="number">1</span>,l,r<span class="number">-1</span>)+(a[i]==b[r]?<span class="number">1</span>:<span class="number">0</span>));</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 附正解，网上的讲解已经很完善了。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">100000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[MAXN],b[MAXN];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>,la=<span class="number">1</span>,lb=<span class="number">1</span>,ra=n,rb=n;</span><br><span class="line">	<span class="keyword">while</span>(la&lt;=ra)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[la]&gt;b[lb])</span><br><span class="line">		&#123;</span><br><span class="line">			ans+=<span class="number">2</span>;</span><br><span class="line">			++la,++lb;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a[ra]&gt;b[rb])</span><br><span class="line">		&#123;</span><br><span class="line">			ans+=<span class="number">2</span>;</span><br><span class="line">			--ra,--rb;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[la]==b[rb])</span><br><span class="line">				++ans;</span><br><span class="line">			++la,--rb;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">	<span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b[i]);</span><br><span class="line">	<span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,<span class="built_in">solve</span>(a,b),(n&lt;&lt;<span class="number">1</span>)-<span class="built_in">solve</span>(b,a));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>BZOJ1015[JSOI2008]星球大战starwar题解报告</title>
    <url>/20171015/BZOJ1015%5BJSOI2008%5D%E6%98%9F%E7%90%83%E5%A4%A7%E6%88%98starwar%E9%A2%98%E8%A7%A3%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1015">题目链接</a></p>
<p>考虑正序去除点去掉其所有连边十分复杂，可以倒序离线处理，每次新建一个点，连接其连边，用并查集统计联通块的个数。 附代码 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">400000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> ans[MAXN],fa[MAXN],rnk[MAXN],hd[MAXN],des[MAXN];</span><br><span class="line"><span class="keyword">int</span> ff[MAXN],tt[MAXN];</span><br><span class="line"><span class="keyword">int</span> to[MAXN&lt;&lt;<span class="number">1</span>],nxt[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">bool</span> used[MAXN];</span><br><span class="line"><span class="keyword">int</span> cnt,n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++cnt]=t;</span><br><span class="line">    nxt[cnt]=hd[f];</span><br><span class="line">    hd[f]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fa[x]==x?x:fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="built_in">find</span>(x),y=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(rnk[x]==rnk[y])</span><br><span class="line">        fa[x]=y,++rnk[y];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(rnk[x]&gt;rnk[y])</span><br><span class="line">        fa[y]=x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        fa[x]=y;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i)</span><br><span class="line">        fa[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;ff[i],&amp;tt[i]);</span><br><span class="line">        <span class="built_in">build</span>(ff[i],tt[i]);</span><br><span class="line">        <span class="built_in">build</span>(tt[i],ff[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;des[i]),</span><br><span class="line">        used[des[i]]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ansn=n-k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!used[ff[i]]&amp;&amp;!used[tt[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">unite</span>(ff[i],tt[i]))</span><br><span class="line">                --ansn;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=k;j&gt;=<span class="number">1</span>;--j)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[j]=ansn;</span><br><span class="line">        ++ansn;</span><br><span class="line">        <span class="keyword">int</span> u=des[j];</span><br><span class="line">        used[u]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=nxt[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=to[i];</span><br><span class="line">            <span class="keyword">if</span>(used[v]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">unite</span>(u,v))</span><br><span class="line">                --ansn;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ansn);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>Borůvka’s algorithm与位运算最小生成树（异或最小生成树，AND最小生成树）</title>
    <url>/20211018/Bor%C5%AFvka%E2%80%99s%20algorithm%E4%B8%8E%E4%BD%8D%E8%BF%90%E7%AE%97%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%EF%BC%88%E5%BC%82%E6%88%96%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%EF%BC%8CAND%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%EF%BC%89/</url>
    <content><![CDATA[<h1 id="borůvkas-algorithm">Borůvka’s algorithm</h1>
<p>最初每个点是孤立点。从所有当前的连通块向其他连通块扩展出最小边，直到只剩一个连通块。</p>
<p>时间复杂度<span class="math inline">\(O(E\log V)\)</span> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5005</span>,M=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> f,t,v;</span><br><span class="line">&#125;e[M];</span><br><span class="line"><span class="keyword">int</span> fa[N],lk[N],cpt[N],n,m; <span class="comment">//cpt cheapest 子树中最小的边权 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> fa[x]==x?x:fa[x]=<span class="built_in">find</span>(fa[x]);&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Boruvka</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) fa[i]=i;</span><br><span class="line">	<span class="keyword">int</span> t=n;</span><br><span class="line">	<span class="keyword">while</span>(t&gt;<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) lk[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">			<span class="keyword">int</span> x=<span class="built_in">find</span>(e[i].f),y=<span class="built_in">find</span>(e[i].t);</span><br><span class="line">			<span class="keyword">if</span>(x!=y)&#123;</span><br><span class="line">				++cnt;</span><br><span class="line">				<span class="keyword">if</span>(!lk[x]||cpt[x]&gt;e[i].v) lk[x]=y,cpt[x]=e[i].v;</span><br><span class="line">				<span class="keyword">if</span>(!lk[y]||cpt[y]&gt;e[i].v) lk[y]=x,cpt[y]=e[i].v;</span><br><span class="line">				<span class="comment">//lk[i]: 在本轮连边中 i子树连向哪棵子树 </span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!cnt) <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//图不联通 </span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(fa[i]==i)&#123;</span><br><span class="line">				fa[<span class="built_in">find</span>(lk[i])]=i;</span><br><span class="line">				ans+=cpt[i];</span><br><span class="line">				--t;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="异或最小生成树">异或最小生成树</h1>
<p>给每一个点一个点权，连接两个点<span class="math inline">\(i,j\)</span>的边的边权为<span class="math inline">\(a_i\)</span> xor <span class="math inline">\(a_j\)</span>，求这张图上的最小生成树。</p>
<p>我们怎么快速找到连通块外的最近点（异或值最小的点）呢，这时我们就需要0/1字典树了。</p>
<p>我们可以建立一个全局字典树包含所有的点权，然后对每个连通块都维护一个单独的字典树，每个字典树中包含了这个连通块中的所有点权。</p>
<p>每次查询某个点<span class="math inline">\(a_i\)</span>的最近点的时候，我们从高位到低位比较，假设当前在第<span class="math inline">\(i\)</span>位，且<span class="math inline">\(a_i\)</span>的第<span class="math inline">\(i\)</span>位上的值为<span class="math inline">\(b\)</span>，如果连通块外有<span class="math inline">\(i\)</span>位也为<span class="math inline">\(b\)</span>的数字（说明<span class="math inline">\(b\)</span>方向上，全局字典树的size大于当前连通块字典树的size），我们必然选择同为<span class="math inline">\(b\)</span>的数字，我们在两棵字典树的位置都往<span class="math inline">\(b\)</span>方向转移。如果没有，我们便在字典树上的位置便要向<span class="math inline">\(b\)</span> <span class="math inline">\(xor\)</span> <span class="math inline">\(1\)</span>的方向转移，结果值就要加上<span class="math inline">\(2^i\)</span>。</p>
<p>参考：https://zhuanlan.zhihu.com/p/164633727</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> t[<span class="number">2</span>][N*<span class="number">60</span>],siz[N*<span class="number">60</span>],val[N*<span class="number">60</span>],root[N];</span><br><span class="line"><span class="keyword">int</span> cnd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> x,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> b;</span><br><span class="line">	++siz[u];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">30</span>;~i;--i)&#123;</span><br><span class="line">		b=x&gt;&gt;i&amp;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(!t[b][u]) t[b][u]=++cnd;</span><br><span class="line">		u=t[b][u];</span><br><span class="line">		++siz[u];</span><br><span class="line">	&#125;</span><br><span class="line">	val[u]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pii <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> lt,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;--i)&#123;<span class="comment">//从高位到低位贪心 </span></span><br><span class="line">		<span class="keyword">bool</span> b=x&gt;&gt;i&amp;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> sr=t[b][rt]?siz[t[b][rt]]:<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> sl=t[b][lt]?siz[t[b][lt]]:<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(sr&gt;sl)&#123;<span class="comment">//全局的字典树大于当前的字典树 </span></span><br><span class="line">			rt=t[b][rt];<span class="comment">////可以走与x的第i位相同的 </span></span><br><span class="line">			lt=t[b][lt];</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;<span class="comment">//不得不走与x的第i位相异的 </span></span><br><span class="line">			ans+=(<span class="number">1</span>&lt;&lt;i);<span class="comment">//当前位对答案贡献 </span></span><br><span class="line">			rt=t[b^<span class="number">1</span>][rt];</span><br><span class="line">			lt=t[b^<span class="number">1</span>][lt];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">pii</span>(ans,val[rt]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">0</span>||y==<span class="number">0</span>)&#123;</span><br><span class="line">		x=x+y;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">merge</span>(t[<span class="number">0</span>][x],t[<span class="number">0</span>][y]);</span><br><span class="line">	<span class="built_in">merge</span>(t[<span class="number">1</span>][x],t[<span class="number">1</span>][y]);</span><br><span class="line">	siz[x]+=siz[y];</span><br><span class="line">	val[x]=<span class="built_in">max</span>(val[x],val[y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> fa[N],lk[N],cpt[N],n,m,a[N]; <span class="comment">//cpt cheapest 子树中最小的边权 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> fa[x]==x?x:fa[x]=<span class="built_in">find</span>(fa[x]);&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">		fa[i]=i;</span><br><span class="line">		root[i]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	root[<span class="number">0</span>]=n+<span class="number">1</span>;</span><br><span class="line">	cnd=n+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">	n=<span class="built_in">unique</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>)-a<span class="number">-1</span>;<span class="comment">//相同的数可以事先用边权为0的边连起来 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="built_in">insert</span>(root[<span class="number">0</span>],a[i],i);</span><br><span class="line">		<span class="built_in">insert</span>(root[i],a[i],i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> t=n;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(t&gt;<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) lk[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="keyword">int</span> x=<span class="built_in">find</span>(i);</span><br><span class="line">			pii tmp=<span class="built_in">query</span>(root[<span class="number">0</span>],root[x],a[i]);</span><br><span class="line">			<span class="keyword">int</span> w=tmp.first,y=<span class="built_in">find</span>(tmp.second);</span><br><span class="line">			<span class="keyword">if</span>(x!=y)&#123;</span><br><span class="line">				<span class="keyword">if</span>(!lk[x]||cpt[x]&gt;w) lk[x]=y,cpt[x]=w;</span><br><span class="line">				<span class="keyword">if</span>(!lk[y]||cpt[y]&gt;w) lk[y]=x,cpt[y]=w;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(fa[i]==i)&#123;</span><br><span class="line">				<span class="keyword">int</span> fi=<span class="built_in">find</span>(lk[i]);</span><br><span class="line">				fa[fi]=i;</span><br><span class="line">				<span class="built_in">merge</span>(root[i],root[fi]);</span><br><span class="line">				ans+=cpt[i];</span><br><span class="line">				--t;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="the-2020-icpc-asia-macau-regional-contest"><a href="https://codeforces.com/gym/103119">The 2020 ICPC Asia Macau Regional Contest</a></h1>
<h2 id="c-club-assignment">C Club Assignment</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">500000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> t[<span class="number">2</span>][N*<span class="number">60</span>],siz[N*<span class="number">60</span>],val[N*<span class="number">60</span>],root[N];</span><br><span class="line"><span class="keyword">int</span> cnd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> x,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> b;</span><br><span class="line">	++siz[u];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">30</span>;~i;--i)&#123;</span><br><span class="line">		b=x&gt;&gt;i&amp;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(!t[b][u]) t[b][u]=++cnd;</span><br><span class="line">		u=t[b][u];</span><br><span class="line">		++siz[u];</span><br><span class="line">	&#125;</span><br><span class="line">	val[u]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pii <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> lt,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">30</span>;~i;--i)&#123;</span><br><span class="line">		<span class="keyword">bool</span> b=x&gt;&gt;i&amp;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> sr=t[b][rt]?siz[t[b][rt]]:<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> sl=t[b][lt]?siz[t[b][lt]]:<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(sr&gt;sl)&#123;</span><br><span class="line">			rt=t[b][rt];</span><br><span class="line">			lt=t[b][lt];</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			ans+=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">			rt=t[b^<span class="number">1</span>][rt];</span><br><span class="line">			lt=t[b^<span class="number">1</span>][lt];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">pii</span>(ans,val[rt]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">0</span>||y==<span class="number">0</span>)&#123;</span><br><span class="line">		x=x+y;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">merge</span>(t[<span class="number">0</span>][x],t[<span class="number">0</span>][y]);</span><br><span class="line">	<span class="built_in">merge</span>(t[<span class="number">1</span>][x],t[<span class="number">1</span>][y]);</span><br><span class="line">	siz[x]+=siz[y];</span><br><span class="line">	val[x]=<span class="built_in">max</span>(val[x],val[y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> fa[N],lk[N],cpt[N],n,m,a[N],ff[N*<span class="number">2</span>],ans[N];</span><br><span class="line">pii b[N],lp[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> fa[x]==x?x:fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ffd</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> ff[x]==x?x:ff[x]=<span class="built_in">ffd</span>(ff[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uni</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	x=<span class="built_in">ffd</span>(x),y=<span class="built_in">ffd</span>(y);</span><br><span class="line">	<span class="keyword">if</span>(x!=y)&#123;</span><br><span class="line">		ff[x]=y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//init start </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnd;++i)&#123;</span><br><span class="line">		siz[i]=<span class="number">0</span>;</span><br><span class="line">		t[<span class="number">0</span>][i]=t[<span class="number">1</span>][i]=<span class="number">0</span>;</span><br><span class="line">		val[i]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cnd=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">que</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!siz[u]) <span class="keyword">return</span> <span class="number">2e9</span>;</span><br><span class="line">	<span class="keyword">bool</span> b;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">30</span>;~i;--i)&#123;</span><br><span class="line">		b=x&gt;&gt;i&amp;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(!t[b][u])&#123;</span><br><span class="line">			ans|=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">			u=t[b^<span class="number">1</span>][u];</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			u=t[b][u];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> b;</span><br><span class="line">	++siz[u];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">30</span>;~i;--i)&#123;</span><br><span class="line">		b=x&gt;&gt;i&amp;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(!t[b][u]) t[b][u]=++cnd;</span><br><span class="line">		u=t[b][u];</span><br><span class="line">		++siz[u];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">			b[i].first=a[i];</span><br><span class="line">			b[i].second=i;</span><br><span class="line">			fa[i]=i;</span><br><span class="line">			root[i]=i;</span><br><span class="line">		&#125;</span><br><span class="line">		root[<span class="number">0</span>]=n+<span class="number">1</span>;</span><br><span class="line">		cnd=n+<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">int</span> nn=n;</span><br><span class="line">		<span class="built_in">sort</span>(b+<span class="number">1</span>,b+nn+<span class="number">1</span>);</span><br><span class="line">		n=<span class="built_in">unique</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>)-a<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="built_in">insert</span>(root[<span class="number">0</span>],a[i],i);</span><br><span class="line">			<span class="built_in">insert</span>(root[i],a[i],i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> t=n;</span><br><span class="line">		<span class="comment">//int as=0;</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=(n&lt;&lt;<span class="number">1</span>);++i)&#123;</span><br><span class="line">			ff[i]=i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(t&gt;<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) lk[i]=<span class="number">0</span>,lp[i]=<span class="built_in">pii</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">				<span class="keyword">int</span> x=<span class="built_in">find</span>(i);</span><br><span class="line">				pii tmp=<span class="built_in">query</span>(root[<span class="number">0</span>],root[x],a[i]);</span><br><span class="line">				<span class="keyword">int</span> w=tmp.first,y=<span class="built_in">find</span>(tmp.second);</span><br><span class="line">				<span class="keyword">if</span>(x!=y)&#123;</span><br><span class="line">					<span class="keyword">if</span>(!lk[x]||cpt[x]&gt;w) lk[x]=y,lp[x]=<span class="built_in">pii</span>(tmp.second,i),cpt[x]=w;</span><br><span class="line">					<span class="keyword">if</span>(!lk[x]||cpt[y]&gt;w) lk[y]=x,lp[y]=<span class="built_in">pii</span>(i,tmp.second),cpt[y]=w;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">				<span class="keyword">if</span>(fa[i]==i)&#123;</span><br><span class="line">					<span class="keyword">int</span> fi=<span class="built_in">find</span>(lk[i]);</span><br><span class="line">					fa[fi]=i;</span><br><span class="line">					<span class="built_in">merge</span>(root[i],root[fi]);</span><br><span class="line">				<span class="comment">//	cout&lt;&lt;lp[i].first&lt;&lt;&quot;to&quot;&lt;&lt;lp[i].second&lt;&lt;&#x27; &#x27;&lt;&lt;cpt[i]&lt;&lt;endl;</span></span><br><span class="line">					<span class="built_in">uni</span>(lp[i].first,lp[i].second+n);</span><br><span class="line">					<span class="built_in">uni</span>(lp[i].first+n,lp[i].second);</span><br><span class="line">				<span class="comment">//	as+=cpt[i];</span></span><br><span class="line">					--t;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="comment">//	cout&lt;&lt;&quot;!!!&quot;&lt;&lt;as&lt;&lt;endl;</span></span><br><span class="line">		<span class="keyword">int</span> p=<span class="number">1</span>,ft=<span class="number">0</span>,nt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> c1=++cnd,c2=++cnd,a1=<span class="number">2e9</span>,a2=<span class="number">2e9</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="keyword">int</span> now=<span class="built_in">ffd</span>(i);</span><br><span class="line">			<span class="keyword">if</span>(!ft)&#123;</span><br><span class="line">				ft=now;</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(!nt)&#123;</span><br><span class="line">				nt=now;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(now==ft)&#123;</span><br><span class="line">				ans[b[p].second]=<span class="number">1</span>;</span><br><span class="line">				a1=<span class="built_in">min</span>(a1,<span class="built_in">que</span>(c1,b[p].first));</span><br><span class="line">				<span class="built_in">ins</span>(c1,b[p++].first);</span><br><span class="line">				<span class="keyword">while</span>(b[p].first==a[i])&#123;</span><br><span class="line">					ans[b[p].second]=<span class="number">0</span>;</span><br><span class="line">					a2=<span class="built_in">min</span>(a2,<span class="built_in">que</span>(c2,b[p].first));</span><br><span class="line">					<span class="built_in">ins</span>(c2,b[p++].first);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				ans[b[p].second]=<span class="number">0</span>;</span><br><span class="line">				a2=<span class="built_in">min</span>(a2,<span class="built_in">que</span>(c2,b[p].first));</span><br><span class="line">				<span class="built_in">ins</span>(c2,b[p++].first);</span><br><span class="line">				<span class="keyword">while</span>(b[p].first==a[i])&#123;</span><br><span class="line">					ans[b[p].second]=<span class="number">1</span>;</span><br><span class="line">					a1=<span class="built_in">min</span>(a1,<span class="built_in">que</span>(c1,b[p].first));</span><br><span class="line">					<span class="built_in">ins</span>(c1,b[p++].first);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="comment">//	printf(&quot;%d %d\n&quot;,a1,a2);</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">min</span>(a1,a2));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nn;++i)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans[i]+<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">		<span class="built_in">init</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>C语言预处理学习记录</title>
    <url>/20200227/C%E8%AF%AD%E8%A8%80%E9%A2%84%E5%A4%84%E7%90%86%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOCAL <span class="comment">//无参宏</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//条件编译 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">2</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LOCAL</span></span><br><span class="line"><span class="keyword">int</span> b=<span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> </span></span><br><span class="line"><span class="keyword">int</span> b=<span class="number">2</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926535 <span class="comment">//有参宏</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max_wrong(a,b) a&gt;b?a:b</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxwell(a,b) (&#123;\</span></span><br><span class="line">	__typeof(a) _a=(a),_b=(b);\</span><br><span class="line">	_a&gt;_b?_a:_b;\</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG<span class="comment">//</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> log(frm,args...) &#123;\</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;[%s %s %d] : %s = &quot;</span>,__FILE__,__func__,__LINE__,<span class="meta">#args);\</span></span><br><span class="line">	<span class="built_in">printf</span>(frm,#<span class="meta">#args);\</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> log(frm,args...)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">main</span>()&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>,a,b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;max_wrong(2,max_wrong(3,4)) = %d\n&quot;</span>,<span class="built_in">max_wrong</span>(<span class="number">2</span>,<span class="built_in">max_wrong</span>(<span class="number">3</span>,<span class="number">4</span>)));</span><br><span class="line">	<span class="comment">//展开后： 2&gt;3&gt;4?3:4?2:3&gt;4?3:4 实际执行 ((2&gt;3&gt;4)?(3):(4))? (2) : (3&gt;4?3:4)</span></span><br><span class="line">	<span class="comment">//使用 -E 编译选项获得预编译结果 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;max(2,max(3,4)) = %d\n&quot;</span>,<span class="built_in">max</span>(<span class="number">2</span>,<span class="built_in">max</span>(<span class="number">3</span>,<span class="number">4</span>)));</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">max</span>(a++,<span class="number">0</span>));</span><br><span class="line">	<span class="built_in">log</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line">	a=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">log</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">maxwell</span>(a++,<span class="number">0</span>));</span><br><span class="line">	<span class="built_in">log</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">log</span>(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>LeetCode 337. House Robber III 打家劫舍</title>
    <url>/20200805/LeetCode%20337.%20House%20Robber%20III%20%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</url>
    <content><![CDATA[<p>第一次用结构体代替dp数组，这个题没有标明树的深度，用数组存二叉树会爆内存。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * struct TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode *left;</span><br><span class="line"> *     TreeNode *right;</span><br><span class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> *&#x2F;</span><br><span class="line">struct dp&#123;</span><br><span class="line">    int v0,v1;</span><br><span class="line">    dp *lf;</span><br><span class="line">    dp *rt;</span><br><span class="line">    dp() : v0(0),v1(0),lf(NULL),rt(NULL)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    void dfs(TreeNode *p,dp *u)&#123;</span><br><span class="line">        if(!p)&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        if(!p-&gt;left&amp;&amp;!p-&gt;right)&#123;</span><br><span class="line">            u-&gt;v0&#x3D;0;</span><br><span class="line">            u-&gt;v1&#x3D;p-&gt;val;</span><br><span class="line">            return ;</span><br><span class="line">        &#125;</span><br><span class="line">        u-&gt;lf&#x3D;new dp(),u-&gt;rt&#x3D;new dp();</span><br><span class="line">        if(p-&gt;left)&#123;</span><br><span class="line">            dfs(p-&gt;left,u-&gt;lf);</span><br><span class="line">        &#125;</span><br><span class="line">        if(p-&gt;right)&#123;</span><br><span class="line">            dfs(p-&gt;right,u-&gt;rt);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;*</span><br><span class="line">        dp[1][u]&#x3D;dp[0][L(u)]+dp[0][R(u)]+p-&gt;val;</span><br><span class="line">        dp[0][u]&#x3D;max(dp[0][L(u)],dp[1][L(u)])+max(dp[0][R(u)],dp[1][R(u)]);</span><br><span class="line">        *&#x2F;</span><br><span class="line">        u-&gt;v1&#x3D;p-&gt;val+u-&gt;lf-&gt;v0+u-&gt;rt-&gt;v0;</span><br><span class="line">        u-&gt;v0&#x3D;max(u-&gt;lf-&gt;v0,u-&gt;lf-&gt;v1)+max(u-&gt;rt-&gt;v0,u-&gt;rt-&gt;v1);</span><br><span class="line">    &#125;</span><br><span class="line">    int rob(TreeNode* root) &#123;</span><br><span class="line">        dp *ans&#x3D;new dp();</span><br><span class="line">        dfs(root,ans);</span><br><span class="line">        return max(ans-&gt;v0,ans-&gt;v1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>NOIP2012 疫情控制 题解（LuoguP1084）</title>
    <url>/20171024/NOIP2012%20%E7%96%AB%E6%83%85%E6%8E%A7%E5%88%B6%20%E9%A2%98%E8%A7%A3%EF%BC%88LuoguP1084%EF%BC%89/</url>
    <content><![CDATA[<h2 id="noip2012-疫情控制-题解luogup1084">NOIP2012 疫情控制 题解（LuoguP1084）</h2>
<p>不难发现，如果一个点向上移动一定能控制更多的点，所以可以二分时间，判断是否可行。<br />
但根节点不能不能控制，存在以当前时间可以走到根节点的点，可使向下走到深度为2的节点控制 其他点，此时又可以进行另一个贪心，优先选择走到根节点还能再走的时间小的去控制深度一到二之间边权较小的。<br />
某大佬有更加详尽的讲解，<a href="http://www.cnblogs.com/illyaillyasviel/p/7705893.html">参见这里</a> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">50000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> anc[<span class="number">21</span>][MAXN];</span><br><span class="line">ll tab[<span class="number">21</span>][MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> t,v,n;</span><br><span class="line">&#125;e[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> cnt,n,m,scnt;</span><br><span class="line"><span class="keyword">int</span> rsn[MAXN],siz[MAXN],army[MAXN],hd[MAXN],frm[MAXN];</span><br><span class="line"><span class="keyword">bool</span> cvef[MAXN],cover[MAXN];</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line">pii a[MAXN],c[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[++cnt]=(Edge)&#123;t,v,hd[f]&#125;;</span><br><span class="line">	hd[f]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(anc[<span class="number">0</span>][u]==<span class="number">1</span>)</span><br><span class="line">		frm[u]=u;</span><br><span class="line">	<span class="keyword">else</span> frm[u]=frm[anc[<span class="number">0</span>][u]];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=e[i].n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v=e[i].t;</span><br><span class="line">		<span class="keyword">if</span>(v==anc[<span class="number">0</span>][u])</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		++siz[u];</span><br><span class="line">		anc[<span class="number">0</span>][v]=u;</span><br><span class="line">		tab[<span class="number">0</span>][v]=e[i].v;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;anc[i<span class="number">-1</span>][v];++i)</span><br><span class="line">		&#123;</span><br><span class="line">			anc[i][v]=anc[i<span class="number">-1</span>][anc[i<span class="number">-1</span>][v]];</span><br><span class="line">			tab[i][v]=tab[i<span class="number">-1</span>][v]+tab[i<span class="number">-1</span>][anc[i<span class="number">-1</span>][v]];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">dfs1</span>(v);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cvef[u]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(siz[u]&gt;<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=e[i].n)</span><br><span class="line">		<span class="keyword">if</span>(e[i].t!=anc[<span class="number">0</span>][u])</span><br><span class="line">			<span class="built_in">dfs2</span>(e[i].t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initrt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=hd[<span class="number">1</span>];i;i=e[i].n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v=e[i].t;</span><br><span class="line">		rsn[++scnt]=v;</span><br><span class="line">		<span class="built_in">dfs2</span>(v);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(cover,<span class="number">0</span>,<span class="keyword">sizeof</span> cover);</span><br><span class="line">	<span class="keyword">int</span> cntc=<span class="number">0</span>,cnta=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		ll tmp=mid;</span><br><span class="line">		<span class="keyword">int</span> pos=army[i];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">20</span>;j&gt;=<span class="number">0</span>;--j)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(anc[j][pos]&amp;&amp;tmp&gt;=tab[j][pos])</span><br><span class="line">			&#123;</span><br><span class="line">				tmp-=tab[j][pos];</span><br><span class="line">				pos=anc[j][pos];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(pos!=<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(cvef[pos])</span><br><span class="line">				cover[frm[pos]]=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			a[++cnta]=<span class="built_in">pii</span>(tmp,frm[army[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=scnt;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!cover[rsn[i]])</span><br><span class="line">			c[++cntc]=<span class="built_in">pii</span>(tab[<span class="number">0</span>][rsn[i]],rsn[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(cntc&gt;cnta)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">sort</span>(a+<span class="number">1</span>,a+cnta+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">sort</span>(c+<span class="number">1</span>,c+cntc+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> t=cntc;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnta;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!cover[a[i].second])</span><br><span class="line">			cover[a[i].second]=<span class="number">1</span>,--t;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(j&lt;=cntc&amp;&amp;cover[c[j].second])</span><br><span class="line">				++j;</span><br><span class="line">			<span class="keyword">if</span>(a[i].first&gt;=c[j].first)</span><br><span class="line">				cover[c[j].second]=<span class="number">1</span>,++j,--t;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(t&gt;<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">int</span> x,y,z;</span><br><span class="line">	ll l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">		<span class="built_in">build</span>(x,y,z);</span><br><span class="line">		<span class="built_in">build</span>(y,x,z);</span><br><span class="line">		r+=z;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;army[i]);</span><br><span class="line">	<span class="built_in">dfs1</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">initrt</span>();</span><br><span class="line">	<span class="keyword">if</span>(m&lt;scnt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(r-l&gt;<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		ll mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">check</span>(mid))</span><br><span class="line">			r=mid;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			l=mid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,r);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <del>看来是只是贪心二分等基础算法我也不会QAQ</del></p>
]]></content>
  </entry>
  <entry>
    <title>Poj1328Radar Installation雷达安装</title>
    <url>/20171017/Poj1328Radar%20Installation%E9%9B%B7%E8%BE%BE%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p><a href="http://poj.org/problem?id=1328">原题链接</a></p>
<p>经典贪心，转化为问题为，对于所有的区间，求最小的点数能使每个区间都至少有一个点。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">100000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">0.000001</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">double</span> l,r;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> seg&amp; b)<span class="keyword">const</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(l==b.l)</span><br><span class="line">			<span class="keyword">return</span> r&lt;b.r;</span><br><span class="line">		<span class="keyword">return</span> l&lt;b.l;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;e[MAXN];</span><br><span class="line"><span class="keyword">int</span> cs;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,R;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;R))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(n==<span class="number">0</span>&amp;&amp;R==<span class="number">0</span>)</span><br><span class="line">			 <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">int</span> x,y;</span><br><span class="line">		<span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(e,<span class="number">0</span>,<span class="keyword">sizeof</span> e);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">			<span class="keyword">if</span>(y==R)</span><br><span class="line">			&#123;</span><br><span class="line">				e[i]=(seg)&#123;<span class="number">1.0</span>*x,<span class="number">1.0</span>*x&#125;;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(y&lt;R)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">double</span> t=<span class="built_in">sqrt</span>(R*R-y*y);</span><br><span class="line">				e[i]=(seg)&#123;x-t,x+t&#125;;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				f=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans;</span><br><span class="line">		<span class="keyword">if</span>(f)</span><br><span class="line">			ans=<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">sort</span>(e+<span class="number">1</span>,e+n+<span class="number">1</span>);</span><br><span class="line">			ans=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">double</span> t=e[<span class="number">1</span>].r;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(e[i].l&gt;t)</span><br><span class="line">				&#123;</span><br><span class="line">					++ans;</span><br><span class="line">					t=e[i].r;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(e[i].r&lt;t)</span><br><span class="line">					t=e[i].r;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Case %d: %d\n&quot;</span>,++cs,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>Strategic game(无向)二分图最小点覆盖(Poj1463,Uva1292)</title>
    <url>/20171027/Strategic%20game(%E6%97%A0%E5%90%91)%E4%BA%8C%E5%88%86%E5%9B%BE%E6%9C%80%E5%B0%8F%E7%82%B9%E8%A6%86%E7%9B%96(Poj1463,Uva1292)/</url>
    <content><![CDATA[<p><a href="http://poj.org/problem?id=1463">原题链接</a><br />
此题求二分图的最小点覆盖，数值上等于该二分图的最大匹配。得知此结论可以将图染色，建有向图，然后跑匈牙利/网络流,如下。然而... <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">2000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> q[MAXN],hd1[MAXN],hd2[MAXN];</span><br><span class="line"><span class="keyword">int</span> lnk[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN],bw[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,ft,rr,cnt1,cnt2;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> t,n;</span><br><span class="line">&#125;e1[MAXN&lt;&lt;<span class="number">1</span>],e2[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e1[++cnt1]=(Edge)&#123;t,hd1[f]&#125;;</span><br><span class="line">	hd1[f]=cnt1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build2</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e2[++cnt2]=(Edge)&#123;t,hd2[f]&#125;;</span><br><span class="line">	hd2[f]=cnt2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ft=rr=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(bw,<span class="number">0</span>,<span class="keyword">sizeof</span> bw);</span><br><span class="line">	<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">	q[rr++]=<span class="number">0</span>;</span><br><span class="line">	vis[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	bw[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(ft&lt;rr)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> u=q[ft++];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=hd1[u];i;i=e1[i].n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> v=e1[i].t;</span><br><span class="line">			<span class="keyword">if</span>(!vis[v])</span><br><span class="line">			&#123;</span><br><span class="line">				vis[v]=<span class="number">1</span>;</span><br><span class="line">				bw[v]=bw[u]^<span class="number">1</span>;</span><br><span class="line">				q[rr++]=v;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=hd2[u];i;i=e2[i].n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v=e2[i].t;</span><br><span class="line">		<span class="keyword">if</span>(!vis[v])</span><br><span class="line">		&#123;</span><br><span class="line">			vis[v]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(lnk[v]==<span class="number">-1</span>||<span class="built_in">match</span>(lnk[v]))</span><br><span class="line">			&#123;</span><br><span class="line">				lnk[v]=u;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n))</span><br><span class="line">	&#123;</span><br><span class="line">		cnt1=cnt2=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(hd1,<span class="number">0</span>,<span class="keyword">sizeof</span> hd1);</span><br><span class="line">		<span class="built_in">memset</span>(e1,<span class="number">0</span>,<span class="keyword">sizeof</span> e1);</span><br><span class="line">		<span class="built_in">memset</span>(e2,<span class="number">0</span>,<span class="keyword">sizeof</span> e2);</span><br><span class="line">		<span class="built_in">memset</span>(hd2,<span class="number">0</span>,<span class="keyword">sizeof</span> hd2);</span><br><span class="line">		<span class="built_in">memset</span>(lnk,<span class="number">-1</span>,<span class="keyword">sizeof</span> lnk);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> from,m,to;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d:(%d)&quot;</span>,&amp;from,&amp;m);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;to),<span class="built_in">build</span>(from,to),<span class="built_in">build</span>(to,from);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">bfs</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;++k)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(bw[k])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=hd1[k];i;i=e1[i].n)</span><br><span class="line">					<span class="built_in">build2</span>(k,e1[i].t);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(bw[i])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">match</span>(i))</span><br><span class="line">					++ans;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 然而我看网络上流传的都是另一种做法，直接输出在原无向图的最大匹配除以2，却很少有人证明（<del>可能是各位大佬都认为这太显然了不用证</del>）。仔细思考这个结论还是比较显然的（<del>虽然我还想了一会</del>），这里给出简单的证明，原来匹配一次的边被分别从从左右两个方向匹配了一次，这样每天匹配边就被记录了两次，又因为是求得的是最大匹配数，所以左右两边的匹配都应是最大匹配，故求<strong>给定无向图求最大匹配可以直接在原图求最大匹配，答案为该数值除以2</strong>。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">2000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> hd[MAXN],lnk[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> t,n;</span><br><span class="line">&#125;e[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[++cnt]=(Edge)&#123;t,hd[f]&#125;;</span><br><span class="line">	hd[f]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=e[i].n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v=e[i].t;</span><br><span class="line">		<span class="keyword">if</span>(!vis[v])</span><br><span class="line">		&#123;</span><br><span class="line">			vis[v]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(lnk[v]==<span class="number">-1</span>||<span class="built_in">match</span>(lnk[v]))</span><br><span class="line">			&#123;</span><br><span class="line">				lnk[v]=u;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n))</span><br><span class="line">	&#123;</span><br><span class="line">		cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(hd,<span class="number">0</span>,<span class="keyword">sizeof</span> hd);</span><br><span class="line">		<span class="built_in">memset</span>(e,<span class="number">0</span>,<span class="keyword">sizeof</span> e);</span><br><span class="line">		<span class="built_in">memset</span>(lnk,<span class="number">-1</span>,<span class="keyword">sizeof</span> lnk);</span><br><span class="line">		<span class="keyword">int</span> from,m,to;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d:(%d)&quot;</span>,&amp;from,&amp;m);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;to),<span class="built_in">build</span>(from,to),<span class="built_in">build</span>(to,from);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">match</span>(i))</span><br><span class="line">				++ans;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans&gt;&gt;<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 还有DP解法，待填。<br />
11.02UPD <a href="http://www.cnblogs.com/chwhc/p/7773763.html">树形DP解法</a></p>
]]></content>
  </entry>
  <entry>
    <title>Strategic game树形DP解法(Poj1463,Uva1292)</title>
    <url>/20171102/Strategic%20game%E6%A0%91%E5%BD%A2DP%E8%A7%A3%E6%B3%95(Poj1463,Uva1292)/</url>
    <content><![CDATA[<p>已经写过本题用二分图的做法，<a href="http://www.cnblogs.com/chwhc/p/7741655.html">见这儿</a>。<br />
本题的图是一棵树，求最小点覆盖也可以用树形DP的做法。<br />
定义状态f[0/1][u]表示以u为根的子树，u选取/不选最少需要选取多少点来覆盖。<br />
显然 f[0][u] = Sigma{f[1][v]},f[1][u] = Sigma{min(f[0][v],f[1][v])}+1 ( &lt; u,v &gt; 属于G且v!=u.father) <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">2000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> hd[MAXN],outd[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> t,n;</span><br><span class="line">&#125;e[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">2</span>][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[++cnt]=(Edge)&#123;t,hd[f]&#125;;</span><br><span class="line">	hd[f]=cnt;</span><br><span class="line">	++outd[f];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=e[i].n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v=e[i].t;</span><br><span class="line">		<span class="keyword">if</span>(v==fa)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(v,u);</span><br><span class="line">		f[<span class="number">0</span>][u]+=f[<span class="number">1</span>][v];</span><br><span class="line">		f[<span class="number">1</span>][u]+=<span class="built_in">min</span>(f[<span class="number">1</span>][v],f[<span class="number">0</span>][v]);</span><br><span class="line">	&#125;</span><br><span class="line">	++f[<span class="number">1</span>][u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n))</span><br><span class="line">	&#123;</span><br><span class="line">		cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(hd,<span class="number">0</span>,<span class="keyword">sizeof</span> hd);</span><br><span class="line">		<span class="built_in">memset</span>(e,<span class="number">0</span>,<span class="keyword">sizeof</span> e);</span><br><span class="line">		<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">		<span class="built_in">memset</span>(outd,<span class="number">0</span>,<span class="keyword">sizeof</span> outd);</span><br><span class="line">		<span class="keyword">int</span> to,from,m;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d:(%d)&quot;</span>,&amp;from,&amp;m);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;to),<span class="built_in">build</span>(from,to),<span class="built_in">build</span>(to,from);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">min</span>(f[<span class="number">0</span>][<span class="number">0</span>],f[<span class="number">1</span>][<span class="number">0</span>]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>[USACO08JAN]Haybale Guessing(LuoguP2898)</title>
    <url>/20171101/%5BUSACO08JAN%5DHaybale%20Guessing(LuoguP2898)/</url>
    <content><![CDATA[<p>The cows, who always have an inferiority complex about their intelligence, have a new guessing game to sharpen their brains.A designated 'Hay Cow' hides behind the barn and creates N (1 ?? N ?? 1,000,000) uniquely-sized stacks (conveniently numbered 1..N) of hay bales, each with 1..1,000,000,000 bales of hay.The other cows then ask the Hay Cow a series of Q (1 ?? Q ?? 25,000) questions about the the stacks, all having the same form:What is the smallest number of bales of any stack in the range of stack numbers Ql..Qh (1 ?? Ql ?? N; Ql ?? Qh ?? N)?The Hay Cow answers each of these queries with a single integer A whose truthfulness is not guaranteed.Help the other cows determine if the answers given by the Hay Cow are self-consistent or if certain answers contradict others.<br />
???鼯+?????<br />
?????????ì????????<br />
????е??????????????κ??????????????????????????С????????????н????????????????????ì???<br />
??????????????????С?????С???????????ì???<br />
?????????ж?????????С?<br />
???????ì??????????????????????С???С????????鼯?????????????????????????????????????鼯???????????????????????????????????鼯????????????????????????????????????????????????????????????????????????δ????????????????????????????????????ì??? <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rint register int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getint</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> c;</span><br><span class="line">	<span class="keyword">for</span>(c=<span class="built_in">getchar</span>();c&gt;<span class="string">&#x27;9&#x27;</span>||c&lt;<span class="string">&#x27;0&#x27;</span>;c=<span class="built_in">getchar</span>());</span><br><span class="line">	<span class="keyword">for</span>(x=<span class="number">0</span>;c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>;c=<span class="built_in">getchar</span>())</span><br><span class="line">		x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1000000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> l,r,v;</span><br><span class="line">&#125;e[MAXN];</span><br><span class="line"><span class="keyword">int</span> lim,n;</span><br><span class="line"><span class="keyword">int</span> srt[MAXN],fa[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(e[a].v==e[b].v)</span><br><span class="line">		<span class="keyword">return</span> e[a].l==e[b].l?e[a].r&lt;e[b].r:e[a].l&lt;e[b].l;</span><br><span class="line">	<span class="keyword">return</span> e[a].v&gt;e[b].v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> fa[x]==x?x:fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(rint i=<span class="number">1</span>;i&lt;=mid;++i)</span><br><span class="line">		srt[i]=i;</span><br><span class="line">	<span class="keyword">for</span>(rint i=<span class="number">1</span>;i&lt;=lim;++i)</span><br><span class="line">		fa[i]=i;</span><br><span class="line">	<span class="built_in">sort</span>(srt+<span class="number">1</span>,srt+mid+<span class="number">1</span>,cmp);</span><br><span class="line">	<span class="keyword">int</span> x,y;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mid;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> t=e[srt[i]].v,l=e[srt[i]].l,</span><br><span class="line">                r=e[srt[i]].r,lm=e[srt[i]].l,rm=e[srt[i]].r;</span><br><span class="line">		<span class="keyword">while</span>(i+<span class="number">1</span>&lt;=mid&amp;&amp;t==e[srt[i+<span class="number">1</span>]].v)</span><br><span class="line">		&#123;</span><br><span class="line">			++i;</span><br><span class="line">			<span class="keyword">if</span>(e[srt[i]].l&gt;r)</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			l=<span class="built_in">max</span>(l,e[srt[i]].l);</span><br><span class="line">			r=<span class="built_in">min</span>(r,e[srt[i]].r);</span><br><span class="line">			lm=<span class="built_in">min</span>(lm,e[srt[i]].l);</span><br><span class="line">			rm=<span class="built_in">max</span>(rm,e[srt[i]].r);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> x=<span class="built_in">find</span>(l),y=<span class="built_in">find</span>(r);</span><br><span class="line">		<span class="keyword">if</span>((l!=r&amp;&amp;x==y&amp;&amp;y!=r)||(l==r&amp;&amp;y!=r)) <span class="comment">//??????ж?</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		x=lm,y=rm;</span><br><span class="line">		<span class="keyword">int</span> rg=<span class="built_in">find</span>(y+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">while</span>(rg!=<span class="built_in">find</span>(x))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> fx=<span class="built_in">find</span>(x);</span><br><span class="line">			fa[fx]=fa[fx+<span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;lim,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">		<span class="built_in">getint</span>(e[i].l),<span class="built_in">getint</span>(e[i].r),<span class="built_in">getint</span>(e[i].v);</span><br><span class="line">	<span class="keyword">int</span> l=<span class="number">1</span>,r=n+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(r-l&gt;<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">check</span>(mid))</span><br><span class="line">			l=mid;</span><br><span class="line">		<span class="keyword">else</span> r=mid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,l==n?<span class="number">0</span>:l+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>一个无聊的游戏——吃豆人</title>
    <url>/20180110/%E4%B8%80%E4%B8%AA%E6%97%A0%E8%81%8A%E7%9A%84%E6%B8%B8%E6%88%8F%E2%80%94%E2%80%94%E5%90%83%E8%B1%86%E4%BA%BA/</url>
    <content><![CDATA[<p>退役后无聊自制了一个游戏...<br />
本想打个2048，限于能力，就照着半成品改成了这个。<br />
Cmd输出太慢有点晃眼。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXC=<span class="number">100</span>,MAXR=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> mat[MAXC][MAXR],dx[<span class="number">4</span>],dy[<span class="number">4</span>];</span><br><span class="line">	<span class="keyword">bool</span> f;</span><br><span class="line">	<span class="keyword">int</span> x,y,score,col,row,tar;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">cls</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">dir</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">char</span> c1,c2;</span><br><span class="line">		c1=<span class="built_in">getch</span>(),c2=<span class="built_in">getch</span>();</span><br><span class="line">		<span class="built_in"><span class="keyword">switch</span></span>(c2)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">72</span>:<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//up</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">75</span>:<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//left</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">77</span>:<span class="keyword">return</span> <span class="number">2</span>;<span class="comment">//right</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">80</span>:<span class="keyword">return</span> <span class="number">3</span>;<span class="comment">//down</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">topblock</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;┌&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;col<span class="number">-1</span>;++i)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;─┬&quot;</span>);</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;─┐&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">buttonblock</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;└&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;col<span class="number">-1</span>;++i)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;─┴&quot;</span>);</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;─┘&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">commonblock</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;├&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;col<span class="number">-1</span>;++i)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;─┼&quot;</span>);</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;─┤&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Game</span>()&#123;</span><br><span class="line">		<span class="built_in">memset</span>(mat,<span class="number">0</span>,<span class="keyword">sizeof</span> mat);</span><br><span class="line">		dx[<span class="number">0</span>]=dy[<span class="number">1</span>]=<span class="number">-1</span>,dx[<span class="number">3</span>]=dy[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">		dx[<span class="number">1</span>]=dx[<span class="number">2</span>]=dy[<span class="number">0</span>]=dy[<span class="number">3</span>]=<span class="number">0</span>;</span><br><span class="line">		mat[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">		tar=<span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">		score=<span class="number">0</span>;<span class="comment">//initation </span></span><br><span class="line">		row=<span class="number">11</span>,col=<span class="number">19</span>;<span class="comment">//settings</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="built_in">print</span>();</span><br><span class="line">		<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">int</span> t=<span class="built_in">dir</span>(),nx=x+dx[t],ny=y+dy[t];</span><br><span class="line">			<span class="keyword">if</span>(nx&gt;=<span class="number">0</span>&amp;&amp;ny&gt;=<span class="number">0</span>&amp;&amp;nx&lt;row&amp;&amp;ny&lt;col)&#123;</span><br><span class="line">				<span class="keyword">if</span>(mat[nx][ny]==tar)</span><br><span class="line">					f=<span class="number">0</span>;</span><br><span class="line">				mat[nx][ny]=mat[x][y];</span><br><span class="line">				mat[x][y]=<span class="number">0</span>;</span><br><span class="line">				x=nx,y=ny;</span><br><span class="line">				<span class="built_in">print</span>();</span><br><span class="line">				<span class="keyword">if</span>(!f)&#123;</span><br><span class="line">					nx=<span class="built_in">rand</span>()%row,ny=<span class="built_in">rand</span>()%col;</span><br><span class="line">					<span class="keyword">if</span>(!mat[nx][ny])</span><br><span class="line">						mat[nx][ny]=tar,f=<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="built_in">cls</span>();</span><br><span class="line">		<span class="built_in">topblock</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;row;++i)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;│&quot;</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;col;++j)&#123;</span><br><span class="line">				<span class="built_in"><span class="keyword">switch</span></span>(mat[i][j])&#123;</span><br><span class="line">					<span class="keyword">case</span> <span class="number">0</span>:<span class="built_in">printf</span>(<span class="string">&quot;  │&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">&quot;%2c│&quot;</span>,mat[i][j]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">			<span class="keyword">if</span>(i==row<span class="number">-1</span>)</span><br><span class="line">				<span class="built_in">buttonblock</span>();</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">commonblock</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">srand</span>((<span class="keyword">unsigned</span>)<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">	<span class="built_in">Game</span>().<span class="built_in">start</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>三值的排序 Sorting a Three-Valued Sequence(洛谷 P1459USACO2.1,IOI96Day2)</title>
    <url>/20171020/%E4%B8%89%E5%80%BC%E7%9A%84%E6%8E%92%E5%BA%8F%20Sorting%20a%20Three-Valued%20Sequence(%E6%B4%9B%E8%B0%B7%20P1459USACO2.1,IOI96Day2)/</url>
    <content><![CDATA[<h2 id="sorting-a-three-valued-sequence">Sorting a Three-Valued Sequence</h2>
<p>IOI'96 - Day 2<br />
Sorting is one of the most frequently performed computational tasks. Consider the special sorting problem in which the records to be sorted have at most three different key values. This happens for instance when we sort medalists of a competition according to medal value, that is, gold medalists come first, followed by silver, and bronze medalists come last.</p>
<p>In this task the possible key values are the integers 1, 2 and 3. The required sorting order is non-decreasing. However, sorting has to be accomplished by a sequence of exchange operations. An exchange operation, defined by two position numbers p and q, exchanges the elements in positions p and q.</p>
<p>You are given a sequence of key values. Write a program that computes the minimal number of exchange operations that are necessary to make the sequence sorted.</p>
<p>本来打了贪心得进行模拟，后来改成了如下玄学贪心做法，十分简洁。欢迎Hack。 统计1,2,3的个数，可知放置1,2,3正确的位置，统计在各位置的数字1，2和3的个数，具体详见下。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> ct[<span class="number">4</span>],c[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> a[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;sort3.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;sort3.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]),++ct[a[i]];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ct[<span class="number">1</span>];++i)</span><br><span class="line">		++c[<span class="number">1</span>][a[i]];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=ct[<span class="number">1</span>]+<span class="number">1</span>;i&lt;=ct[<span class="number">1</span>]+ct[<span class="number">2</span>];++i)</span><br><span class="line">		++c[<span class="number">2</span>][a[i]];</span><br><span class="line">    <span class="comment">//统计个数</span></span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	ans+=c[<span class="number">1</span>][<span class="number">2</span>]+c[<span class="number">1</span>][<span class="number">3</span>];<span class="comment">//把1换到正确位置的最少步数</span></span><br><span class="line">	c[<span class="number">2</span>][<span class="number">3</span>]+=<span class="built_in">max</span>(<span class="number">0</span>,c[<span class="number">2</span>][<span class="number">1</span>]-c[<span class="number">1</span>][<span class="number">2</span>]);<span class="comment">//有多少3被交换到了二位置</span></span><br><span class="line">	ans+=c[<span class="number">2</span>][<span class="number">3</span>];<span class="comment">//将2,3交换到正确位置</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>拦截导弹类问题 （Codevs4888零件分组POJ1065Wooden Sticks）（LIS及其覆盖问题）</title>
    <url>/20171017/%E6%8B%A6%E6%88%AA%E5%AF%BC%E5%BC%B9%E7%B1%BB%E9%97%AE%E9%A2%98%20%EF%BC%88Codevs4888%E9%9B%B6%E4%BB%B6%E5%88%86%E7%BB%84POJ1065Wooden%20Sticks%EF%BC%89%EF%BC%88LIS%E5%8F%8A%E5%85%B6%E8%A6%86%E7%9B%96%E9%97%AE%E9%A2%98%EF%BC%89/</url>
    <content><![CDATA[<h2 id="拦截导弹">拦截导弹</h2>
<p>题意：求最长不上升子序列长度；求一个序列最少分成几个非增子序。</p>
<p>第一问易求，已知序列a，令f[i]为a前i个元素的最长非增子序的长度，则有<br />
f[i]=max{f[i],f[j]+1} (1&lt;=j&lt;=i-1且h[j]&gt;=h[i]).<br />
LIS另有nlogn做法，设g[i]为长度为i的最长不上升结尾最小是什么，二分查找更新次数组可得长度。解本题则可以倒序做LIS。<br />
对于第二问，可以维护一个单调序列,为现有导弹拦截系统的最大高度，顺序处理序列，每次贪心的使用大于该导弹高度最小的来拦截这个导弹，显然这样比使用一个可以拦截更高的系统更优。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">30</span>],f[<span class="number">30</span>],g[<span class="number">30</span>],n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[++n]));</span><br><span class="line">	--n;</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">63</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;<span class="number">0</span>;--i)<span class="comment">//倒序LIS </span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> p=<span class="built_in">lower_bound</span>(f+<span class="number">1</span>,f+n+<span class="number">1</span>,a[i])-f;</span><br><span class="line">		f[p]=a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">lower_bound</span>(f+<span class="number">1</span>,f+n+<span class="number">1</span>,INF)-f<span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">memset</span>(g,<span class="number">63</span>,<span class="keyword">sizeof</span> g);<span class="comment">//初始时可以拦截任意高度的导弹 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> p=<span class="built_in">lower_bound</span>(g+<span class="number">1</span>,g+n+<span class="number">1</span>,a[i])-g;</span><br><span class="line">		g[p]=a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">lower_bound</span>(g+<span class="number">1</span>,g+n+<span class="number">1</span>,INF)-g<span class="number">-1</span>);<span class="comment">//找到最后一个使用过的</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 不难发现，第二问按照贪心的思路打出的实际上是一个nlogn的LIS。这涉及到一个定理。</p>
<p><strong>Dilworth定理：对于一个偏序集，最少链划分等于最长反链长度.</strong></p>
<p>也就是说<strong>把一个数列划分成最少的最长不上升子序列的数目</strong>就等于这个数列的<strong>最长不下降子序列的长度</strong>。</p>
<p>##零件分组 Wooden Sticks</p>
<p>现有一些棍状零件，每个零件都有一定的长度(Li)和重量(Wi)。现在为了加工需要，要将他们分成若干组，使每一组中的零件都能排成一个长度和重量都不下降(若i&lt;j，则Li&lt;=Lj，Wi&lt;=Wj，其中i,j为在同一组中的序号)的序列。请问至少要分成几组？</p>
<p>先按照长度（或重量）双关键字排序，则答案序列一定是该序列的子序。则问题转化为原问题二，问未排序的那一个元素序列最少分成多少最长的非降的子序列。求这个序列的最长非增子序即可。<br />
nlogn的非增序列处理比较复杂，（因为处理到a[i]是，要找到小于该值的最大元素，如果其最小则左移，需要从n到1处理）。可以同第一问一样转化为从右向左做LIS，也可以全部取负数做LIS（废话）。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">100000</span>+<span class="number">5</span>,INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">elem</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> l,w;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> elem&amp; b)<span class="keyword">const</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(l==b.l)</span><br><span class="line">			<span class="keyword">return</span> w&lt;b.w;</span><br><span class="line">		<span class="keyword">return</span> l&lt;b.l;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;e[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> f[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;e[i].l,&amp;e[i].w);</span><br><span class="line">	<span class="built_in">sort</span>(e+<span class="number">1</span>,e+n+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">63</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> p=<span class="built_in">lower_bound</span>(f+<span class="number">1</span>,f+n+<span class="number">1</span>,-e[i].w)-f;</span><br><span class="line">		f[p]=-e[i].w;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">lower_bound</span>(f+<span class="number">1</span>,f+n+<span class="number">1</span>,INF)-f<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>同余最短路问题</title>
    <url>/20210917/%E5%90%8C%E4%BD%99%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>有多少整数<span class="math inline">\(b\in [0,h)\)</span>,使得<span class="math inline">\(\sum\limits_{i=1}^{n}a_ix_i=b\)</span>有非负整数解。</p>
<p>令<span class="math inline">\(dis_i\)</span>表示最小的符合<span class="math inline">\((\sum\limits_{i=1}^{n}a_ix_i)\space mod\space a_k=i(\forall k \in[1.n])\)</span>的<span class="math inline">\(\sum\limits_{i=1}^{n}a_ix_i\)</span>, 则<span class="math inline">\(i+t\cdot a_k,\forall t \in \mathbb{N}\)</span>都有解。</p>
<p><span class="math inline">\(\forall i \in [0,a_k)\)</span>,<span class="math inline">\(\forall j\in[1,n],j\neq k\)</span>建边<span class="math inline">\((i,(i+a_j)mod\space a_k)\)</span>,边权为<span class="math inline">\(a_j\)</span>, 从0开始跑最短路可求<span class="math inline">\(dis_i\)</span>,<span class="math inline">\(a_k\)</span>取<span class="math inline">\(a_1...a_n\)</span>中最小的可保证建边最少运行最快。</p>
<p><span class="math display">\[
ans=\sum\limits_{i=1}^{n}(\lfloor\frac{h-dis_i}{a_k}\rfloor+1)
\]</span></p>
<p>Luogu P3403 跳楼机</p>
<p>题意为: 给定 h,x,y,z，对于 k∈[1,h]，有多少个 k 满足 ax+by+cz=k</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> cnt,hd[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> t,v,n;</span><br><span class="line">&#125;e[N*<span class="number">20</span>];</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	e[++cnt]=(Edge)&#123;t,v,hd[f]&#125;;</span><br><span class="line">	hd[f]=cnt;</span><br><span class="line">&#125;</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">bool</span> inq[N];</span><br><span class="line">ll dis[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ll h,x,y,z;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld%lld&quot;</span>,&amp;h,&amp;x,&amp;y,&amp;z);</span><br><span class="line">	--h;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;x;++i)&#123;</span><br><span class="line">		<span class="built_in">build</span>(i,(i+y)%x,y);</span><br><span class="line">		<span class="built_in">build</span>(i,(i+z)%x,z);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;</span><br><span class="line">		dis[i]=<span class="number">2e18</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	q.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">	dis[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	inq[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">		<span class="keyword">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		inq[u]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=e[i].n)&#123;</span><br><span class="line">			<span class="keyword">int</span> v=e[i].t;</span><br><span class="line">			<span class="keyword">if</span>(dis[v]&gt;dis[u]+e[i].v)&#123;</span><br><span class="line">				dis[v]=dis[u]+e[i].v;</span><br><span class="line">				<span class="keyword">if</span>(!inq[v])&#123;</span><br><span class="line">					inq[v]=<span class="number">1</span>;</span><br><span class="line">					q.<span class="built_in">push</span>(v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;x;++i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(dis[i]&lt;=h)</span><br><span class="line">			ans+=(h-dis[i])/x+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%llu\n&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>墨墨突然对等式很感兴趣，他正在研究 <span class="math inline">\(\sum_{i=1}^n a_ix_i=b\)</span>存在非负整数解的条件，他要求你编写一个程序，给定 <span class="math inline">\(n, a_{1\dots n}, l, r\)</span>,求出有多少<span class="math inline">\(b\in[l,r]\)</span>可以使等式存在非负整数解。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> cnt,hd[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> t,v,n;</span><br><span class="line">&#125;e[N*<span class="number">24</span>];</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	e[++cnt]=(Edge)&#123;t,v,hd[f]&#125;;</span><br><span class="line">	hd[f]=cnt;</span><br><span class="line">&#125;</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">bool</span> inq[N];</span><br><span class="line">ll dis[N],a[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ll n,l,r;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;n,&amp;l,&amp;r);</span><br><span class="line">	l--;</span><br><span class="line">	ll mn=<span class="number">1e18</span>,k=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class="line">		<span class="keyword">if</span>(a[i]&lt;mn)&#123;</span><br><span class="line">			k=i;</span><br><span class="line">			mn=a[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mn;++i)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">			<span class="keyword">if</span>(j!=k)&#123;</span><br><span class="line">				<span class="built_in">build</span>(i,(i+a[j])%mn,a[j]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;dis[i]=<span class="number">2e18</span>;&#125;</span><br><span class="line">	q.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">	dis[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	inq[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">		<span class="keyword">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		inq[u]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=e[i].n)&#123;</span><br><span class="line">			<span class="keyword">int</span> v=e[i].t;</span><br><span class="line">			<span class="keyword">if</span>(dis[v]&gt;dis[u]+e[i].v)&#123;</span><br><span class="line">				dis[v]=dis[u]+e[i].v;</span><br><span class="line">				<span class="keyword">if</span>(!inq[v])&#123;</span><br><span class="line">					inq[v]=<span class="number">1</span>;</span><br><span class="line">					q.<span class="built_in">push</span>(v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> al=<span class="number">0</span>,ar=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mn;++i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(dis[i]&lt;=r)&#123;</span><br><span class="line">			ar+=(r-dis[i])/mn+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(dis[i]&lt;=l)&#123;</span><br><span class="line">				al+=(l-dis[i])/mn+<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%llu\n&quot;</span>,ar-al);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>期望DP_2021牛客暑期多校训练营4_B_Sample_Game</title>
    <url>/20210806/%E6%9C%9F%E6%9C%9BDP-2021%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A54-B-Sample-Game/</url>
    <content><![CDATA[<p>https://ac.nowcoder.com/acm/contest/11255/B</p>
<p><span class="math display">\[
\space
\]</span></p>
<p><span class="math inline">\(f(x)\)</span> 当前选的数字为x，之后的选的数的数量(X)的期望</p>
<p><span class="math inline">\(E(X)=f(x)=\sum_1^{x-1} p_i \cdot 1+p_x \cdot (1+f(x))+\sum_{x+1}^{n}(f(i)+1)\cdot p_i\)</span></p>
<p><span class="math display">\[
f(x)=\frac{1+\sum_{x+1}^{n}f(i)\cdot p_i}{1-p_x }
\]</span> 则总数量为（题目中用不到）</p>
<p><span class="math display">\[
E(X+1)=\sum_1^n p_i \cdot (1+f(i))
\]</span></p>
<p>形式上<span class="math inline">\(E(x)=\sum q_i \cdot c_i\)</span></p>
<p><span class="math inline">\((X+1)^2\)</span>的期望</p>
<p><span class="math inline">\(E((X+1)^2)=\sum q_i \cdot (c_i+1)^2=\sum q_i \cdot ({c_i}^2+2c_i+1)=E(X^2)+2E(X)+1\)</span></p>
<p><span class="math inline">\(g(x)\)</span>为当前选的数字为x，之后<strong>得分</strong>(<span class="math inline">\(E(X^2)\)</span>)的期望</p>
<p><span class="math inline">\(g(x)=\sum_1^{x-1} p_i \cdot 1+p_x \cdot(g(x)+2f(x)+1)+\sum_{x+1}^n p_i \cdot(g(i)+2f(i)+1)\)</span></p>
<p><span class="math display">\[
g(x)=\frac{\sum_1^{x-1} p_i \cdot 1+p_x \cdot(2f(x)+1)+\sum_{x+1}^n p_i \cdot(g(i)+2f(i)+1)}{1-p_x}
\]</span> <span class="math display">\[
=\frac{1+p_x \cdot 2f(x)+\sum_{x+1}^n p_i \cdot(g(i)+2f(i))}{1-p_x}
\]</span></p>
<p>则答案为</p>
<p><span class="math display">\[
E((X+1)^2)=\sum_1^n p_i \cdot (1+2f(i)+g(i))
\]</span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mo=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">105</span>;</span><br><span class="line">ll a[N],f[N],g[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a)</span></span>&#123;</span><br><span class="line">	ll ans=<span class="number">1</span>,p=mo<span class="number">-2</span>;</span><br><span class="line">	<span class="keyword">while</span>(p)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p&amp;<span class="number">1</span>) ans=(ans*a)%mo;</span><br><span class="line">		a=(a*a)%mo;</span><br><span class="line">		p&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans%mo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ll n,S=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class="line">		S+=a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	ll t=<span class="built_in">inv</span>(S);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		a[i]=(a[i]*t)%mo;</span><br><span class="line">	&#125;</span><br><span class="line">	S=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=n;i&gt;<span class="number">0</span>;--i)&#123;</span><br><span class="line">		f[i]=(<span class="number">1</span>+S)%mo*<span class="built_in">inv</span>(<span class="number">1</span>+mo-a[i])%mo;</span><br><span class="line">		S=(S+f[i]*a[i]%mo)%mo;</span><br><span class="line">		<span class="comment">//cout&lt;&lt;f[i]&lt;&lt;endl;</span></span><br><span class="line">	&#125;</span><br><span class="line">	S=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=n;i&gt;<span class="number">0</span>;--i)&#123;</span><br><span class="line">		g[i]=(<span class="number">1</span>+ <span class="number">2</span>*a[i]%mo*f[i]%mo + S)%mo * <span class="built_in">inv</span>(<span class="number">1</span>+mo-a[i])%mo;</span><br><span class="line">		S=(S + a[i]*(g[i] + <span class="number">2</span>*f[i] %mo)%mo )%mo;</span><br><span class="line">	&#125;</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		ans=(ans+(<span class="number">1</span>+<span class="number">2</span>*f[i]%mo+g[i])*a[i]%mo)%mo;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>期望DP学习记录_高次期望</title>
    <url>/20210814/%E6%9C%9F%E6%9C%9BDP%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E9%AB%98%E6%AC%A1%E6%9C%9F%E6%9C%9B/</url>
    <content><![CDATA[<p>luogu1654</p>
<p>一个01串中每个长度为<span class="math inline">\(X\)</span>的全1子串可贡献<span class="math inline">\(X^3\)</span>的分数。</p>
<p>给出n次操作的成功率（在01串后附加1的概率）<span class="math inline">\(p[i]\)</span>，求分数的期望。</p>
<p>设<span class="math inline">\(a[i]\)</span>表示前i位中第i位为1的长度的期望：</p>
<p><span class="math inline">\(a[i]=(a[i−1]+1)×p[i]\)</span></p>
<p>即为在i-1的末尾加一个概率为<span class="math inline">\(p[i]\)</span>出现的1</p>
<p>设<span class="math inline">\(b[i]\)</span>表示前i位中第i位为1的长度的平方的期望，<span class="math inline">\((x+1)^2=x^2+2x+1\)</span>,故</p>
<p><span class="math inline">\(b[i]=(b[i−1]+2×a[i−1]+1)×p[i]\)</span></p>
<p>同理，设<span class="math inline">\(c[i]\)</span>表示前i位中第i位为1的长度的立方的期望：(<span class="math inline">\((x+1)^3=x^3+3x^2+3x+1\)</span>)</p>
<p><span class="math inline">\(c[i]=(c[i−1]+3×b[i−1]+3×a[i−1]+1)×p[i]\)</span></p>
<p>但本题求的是前n位（而不是第n）的得分期望，故</p>
<p><span class="math inline">\(f[i]=(f[i−1]+3×b[i−1]+3×a[i−1]+1)×p[i]+f[i-1]×(1-p[i])\)</span></p>
<p><span class="math inline">\(=f[i-1]+(3×b[i−1]+3×a[i−1]+1)×p[i])\)</span> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100005</span>;</span><br><span class="line"><span class="keyword">double</span> a[N],b[N],f[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="keyword">double</span> p;<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;p);</span><br><span class="line">		a[i]=(a[i<span class="number">-1</span>]+<span class="number">1</span>)*p;</span><br><span class="line">		b[i]=(b[i<span class="number">-1</span>]+a[i<span class="number">-1</span>]*<span class="number">2</span>+<span class="number">1</span>)*p;</span><br><span class="line">		f[i]=f[i<span class="number">-1</span>]+(<span class="number">3</span>*b[i<span class="number">-1</span>]+<span class="number">3</span>*a[i<span class="number">-1</span>]+<span class="number">1</span>)*p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.1lf&quot;</span>,f[n]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>———————————————— 版权声明：本文为CSDN博主「ShineEternal」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。 原文链接：https://blog.csdn.net/kkkksc03/article/details/99619790</p>
]]></content>
  </entry>
  <entry>
    <title>欧拉回路 Hierholzer算法</title>
    <url>/20210604/%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AFHierholzer%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>Hierholzer算法，也称逐步插入回路法。算法流程为从一条回路开始，每次任取一条目前回路中的点，将其替换为一条简单回路，以此寻找到一条欧拉回路。如果从路开始的话，就可以寻找到一条欧拉路。</p>
<p>任取一个起点,开始下面的步骤</p>
<p>如果该点没有相连的点，就将该点加进路径中然后返回。</p>
<p>如果该点有相连的点，就列一张相连点的表然后遍历它们直到该点没有相连的点。(遍历一个点，删除一个点）处理当前的点,删除和这个点相连的边, 在它相邻的点上重复上面的步骤,把当前这个点加入路径中。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>,M=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> t,n,id;</span><br><span class="line">&#125;e[M*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> ans[M];</span><br><span class="line"><span class="keyword">int</span> ind[N],outd[N],hd[N];</span><br><span class="line"><span class="keyword">bool</span> vis[M];</span><br><span class="line"><span class="keyword">int</span> cnt,tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t,<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    e[++cnt]=(Edge)&#123;t,hd[f],id&#125;;</span><br><span class="line">    hd[f]=cnt;</span><br><span class="line">    ++ind[t],++outd[f];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=hd[u]<span class="comment">/*hd[u]会被修改成e[i].n*/</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(i&amp;&amp;vis[<span class="built_in">abs</span>(e[i].id)])&#123;</span><br><span class="line">            i=e[i].n;</span><br><span class="line">        &#125;</span><br><span class="line">        hd[u]=i;<span class="comment">//已经访问过的边不再遍历,故修改第一条边 </span></span><br><span class="line">        <span class="keyword">if</span>(!i) <span class="keyword">break</span>;</span><br><span class="line">        vis[<span class="built_in">abs</span>(e[i].id)]=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(e[i].t);</span><br><span class="line">        ans[++tot]=e[i].id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cs,n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;cs,&amp;n,&amp;m);<span class="comment">//cs 1：无向图 2：有向图 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="built_in">build</span>(x,y,i);</span><br><span class="line">        <span class="keyword">if</span>(cs==<span class="number">1</span>) <span class="built_in">build</span>(y,x,-i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cs==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ind[i]&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;	 </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ind[i]!=outd[i])&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(e[<span class="number">1</span>].t);</span><br><span class="line">    <span class="keyword">if</span>(tot&lt;m)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=m;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ans[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>洛谷 P2181 对角线 全面分析</title>
    <url>/20200810/%E6%B4%9B%E8%B0%B7%20P2181%20%E5%AF%B9%E8%A7%92%E7%BA%BF%20%E5%85%A8%E9%9D%A2%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>对于一个 <span class="math inline">\(n\)</span> 个顶点的凸多边形，它的任何三条对角线都不会交于一点。请求出图形中对角线交点的个数。</p>
<p>练python刷简单题刷到了这个，挺有趣的一道题目。</p>
<h1 id="section">1</h1>
<p>对于一个 <span class="math inline">\(n\)</span> 边形，选任意一个点A可以引出<span class="math inline">\(n-3\)</span>条对角线。相邻的点B再引出<span class="math inline">\(n-3\)</span>条线，分别与前者有<span class="math inline">\(1,2 ... n-3\)</span>个交点。与B相邻且不与A相邻的C引出<span class="math inline">\(n-4\)</span>条线，交A引出的对角线有<span class="math inline">\(1,2 ... n-4\)</span>个交点，B亦然。</p>
<p>有一篇论文介绍得十分详细 <a href="https://wenku.baidu.com/view/2a574e777fd5360cba1adbf8.html">链接</a></p>
<p>故结果应为<span class="math inline">\(\sum\limits^{n-3}_{i=1}(i*\sum\limits^{n-2-i}_{j=1})\quad= \quad\sum\limits^{n-3}_{i=1}i*\frac{(n-i-1)(n-i-2)}{2}\)</span></p>
<p>代码如下 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">ans=<span class="number">0</span></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span> :</span><br><span class="line">    ans+=i*(n-(<span class="number">2</span>+i))*(n-(<span class="number">1</span>+i))//<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> n-(<span class="number">1</span>+i)&lt;=<span class="number">2</span> :</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure></p>
<p>此方法可以解决这个问题，时间复杂度<span class="math inline">\(O(n)\)</span></p>
<h1 id="section-1">2</h1>
<p>我暂时不会对上述和式求和，但推测通项可能是或四次的。故希望能<span class="math inline">\(O(1)\)</span>解决这个问题。</p>
<p>令<span class="math inline">\(f(n)=\sum\limits^{n-3}_{i=1}\frac{(n-i-1)(n-i-2)}{2}\)</span> 易知<span class="math inline">\(f(3)=0,f(4)=1,f(5)=5,f(6)=15,f(7)=35\)</span> 构建范德蒙德矩阵</p>
<p><span class="math display">\[V=vander(\begin{bmatrix}3&amp;4&amp;5&amp;6&amp;7\end{bmatrix})\]</span> <span class="math display">\[V*\vec A=\begin{bmatrix}0&amp;1&amp;5&amp;15&amp;35\end{bmatrix}^T\]</span> <span class="math display">\[ \vec A=\begin{bmatrix}\frac{1}{24}&amp;-\frac{1}{4}&amp;\frac{11}{24}&amp;-\frac{1}{4}&amp;0\end{bmatrix}^T\]</span> 验证<span class="math inline">\(n&gt;=8\)</span>，成立。则 <span class="math display">\[f(n)=[n^4\quad n^3\quad n^2 \quad n\quad1]\vec A\]</span> 使用matlab计算这个问题</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; format <span class="built_in">rat</span></span><br><span class="line">&gt;&gt; V=<span class="built_in">vander</span>([<span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>]);</span><br><span class="line">&gt;&gt; inv(V)*[<span class="number">0</span>;<span class="number">1</span>;<span class="number">5</span>;<span class="number">15</span>;<span class="number">35</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">       <span class="number">1</span>/<span class="number">24</span>    </span><br><span class="line">      <span class="number">-1</span>/<span class="number">4</span>     </span><br><span class="line">      <span class="number">11</span>/<span class="number">24</span>    </span><br><span class="line">      <span class="number">-1</span>/<span class="number">4</span>     </span><br><span class="line">      <span class="number">-1</span>/<span class="number">25588634246423</span></span><br></pre></td></tr></table></figure>
<p>所以代码为此简单的三行 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a=a*a*a*a-a*a*a*<span class="number">6</span>+a*a*<span class="number">11</span>-a*<span class="number">6</span></span><br><span class="line"><span class="built_in">print</span>(a//<span class="number">24</span>)</span><br></pre></td></tr></table></figure> # 3 实际上，用组合数学的方法，我们知道，每四个不同的顶点有一个交点，答案即是<span class="math inline">\(C^{4}_n=\frac{n(n-1)(n-2)(n-3)}{24}\)</span>与以上结果相同。</p>
]]></content>
  </entry>
  <entry>
    <title>珂朵莉树-Chtholly-Tree-学习记录</title>
    <url>/20210907/%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91-Chtholly-Tree-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>用作处理<strong>随机数据</strong>，具有区间赋值操作的序列操作问题 把值相同的区间合并成一个结点保存在 set 里面。 对于add，assign 和 sum 操作，用 set 实现的珂朵莉树的复杂度为<span class="math inline">\(O(nloglogn)\)</span>，而用链表实现的复杂度为<span class="math inline">\(O(nlog)\)</span>。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">  ll l, r;<span class="comment">//闭区间！</span></span><br><span class="line">  <span class="keyword">mutable</span> ll v;<span class="comment">//mutable让我们可以在后面的操作中修改 v 的值</span></span><br><span class="line">  <span class="comment">//可以直接修改已经插入 set 的元素的 v 值，而不用将该元素取出后重新加入 set</span></span><br><span class="line">  <span class="built_in">Node</span>(<span class="keyword">const</span> ll &amp;il, <span class="keyword">const</span> ll &amp;ir, <span class="keyword">const</span> ll &amp;iv):<span class="built_in">l</span>(il),<span class="built_in">r</span>(ir),<span class="built_in">v</span>(iv)&#123;&#125;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;o)<span class="keyword">const</span>&#123;<span class="keyword">return</span> l&lt;o.l;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;Node&gt; odt;</span><br><span class="line"><span class="comment">//包含点 x的区间（设为 [l,r)）分裂为两个区间[l,x)和[x,r)并返回指向后者的迭代器</span></span><br><span class="line">ll n;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">split</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x&gt;n) <span class="keyword">return</span> odt.<span class="built_in">end</span>();</span><br><span class="line">	<span class="keyword">auto</span> it=--odt.<span class="built_in">upper_bound</span>((Node)&#123;x, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">	<span class="keyword">if</span>(it-&gt;l==x) <span class="keyword">return</span> it;</span><br><span class="line">	ll l=it-&gt;l,r=it-&gt;r,v=it-&gt;v;</span><br><span class="line">	odt.<span class="built_in">erase</span>(it);</span><br><span class="line">	odt.<span class="built_in">insert</span>(<span class="built_in">Node</span>(l,x<span class="number">-1</span>,v));</span><br><span class="line">	<span class="keyword">return</span> odt.<span class="built_in">insert</span>(<span class="built_in">Node</span>(x,r,v)).first;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">assign</span><span class="params">(ll l, ll r, ll v)</span></span>&#123;<span class="comment">//区间赋值，作为时间复杂度保证</span></span><br><span class="line">	<span class="keyword">auto</span> itr=<span class="built_in">split</span>(r+<span class="number">1</span>),itl=<span class="built_in">split</span>(l);<span class="comment">//进行求取区间左右端点操作时，必须先 split 右端点，再 split 左端点。若先 split 左端点，返回的迭代器可能在 split 右端点的时候失效，可能会导致 RE。</span></span><br><span class="line">	odt.<span class="built_in">erase</span>(itl,itr);</span><br><span class="line">	odt.<span class="built_in">insert</span>(<span class="built_in">Node</span>(l,r,v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其他的操作，每块都操作（暴力）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_sth</span><span class="params">(ll l,ll r,ll v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> itr=<span class="built_in">split</span>(r+<span class="number">1</span>),itl=<span class="built_in">split</span>(l);</span><br><span class="line">	<span class="keyword">for</span>(;itl!=itr;++itl) &#123;</span><br><span class="line">		<span class="comment">//do something</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例如，区间加</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll l,ll r,ll v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> itr=<span class="built_in">split</span>(r+<span class="number">1</span>),itl=<span class="built_in">split</span>(l);</span><br><span class="line">	<span class="keyword">for</span>(;itl!=itr;++itl) &#123;</span><br><span class="line">		itl-&gt;v+=v;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例如，区间第k小的是几</span></span><br><span class="line"><span class="function">ll <span class="title">kth</span><span class="params">(ll l,ll r,ll k)</span></span>&#123;</span><br><span class="line">	vector&lt;pair&lt;ll,ll&gt; &gt; v;</span><br><span class="line">	<span class="keyword">auto</span> itr=<span class="built_in">split</span>(r+<span class="number">1</span>),itl=<span class="built_in">split</span>(l);</span><br><span class="line">	<span class="keyword">for</span>(;itl!=itr;++itl) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(itl-&gt;v,itl-&gt;r-itl-&gt;l+<span class="number">1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">		k-=v[i].second;</span><br><span class="line">		<span class="keyword">if</span>(k&lt;=<span class="number">0</span>) <span class="keyword">return</span> v[i].first;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;++i)&#123;<span class="comment">//区间初始化</span></span><br><span class="line">        ll x;<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;x);</span><br><span class="line">		odt.<span class="built_in">insert</span>(<span class="built_in">Node</span>(i,i,x));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <a href="https://codeforces.com/problemset/problem/896/C">Willem, Chtholly and Seniorious</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">  ll l, r;</span><br><span class="line">  <span class="keyword">mutable</span> ll v;<span class="comment">//mutable让我们可以在后面的操作中修改 v 的值</span></span><br><span class="line">  <span class="comment">//可以直接修改已经插入 set 的元素的 v 值，而不用将该元素取出后重新加入 set</span></span><br><span class="line">  <span class="built_in">Node</span>(<span class="keyword">const</span> ll &amp;il, <span class="keyword">const</span> ll &amp;ir, <span class="keyword">const</span> ll &amp;iv):<span class="built_in">l</span>(il),<span class="built_in">r</span>(ir),<span class="built_in">v</span>(iv)&#123;&#125;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;o)<span class="keyword">const</span>&#123;<span class="keyword">return</span> l&lt;o.l;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;Node&gt; odt;</span><br><span class="line"><span class="comment">//包含点 x的区间（设为 [l,r)）分裂为两个区间[l,x)和[x,r)并返回指向后者的迭代器</span></span><br><span class="line">ll n;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">split</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x&gt;n) <span class="keyword">return</span> odt.<span class="built_in">end</span>();</span><br><span class="line">	<span class="keyword">auto</span> it=--odt.<span class="built_in">upper_bound</span>((Node)&#123;x, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">	<span class="keyword">if</span>(it-&gt;l==x) <span class="keyword">return</span> it;</span><br><span class="line">	ll l=it-&gt;l,r=it-&gt;r,v=it-&gt;v;</span><br><span class="line">	odt.<span class="built_in">erase</span>(it);</span><br><span class="line">	odt.<span class="built_in">insert</span>(<span class="built_in">Node</span>(l,x<span class="number">-1</span>,v));</span><br><span class="line">	<span class="keyword">return</span> odt.<span class="built_in">insert</span>(<span class="built_in">Node</span>(x,r,v)).first;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">assign</span><span class="params">(ll l, ll r, ll v)</span></span>&#123;<span class="comment">//区间赋值 </span></span><br><span class="line">	<span class="keyword">auto</span> itr=<span class="built_in">split</span>(r+<span class="number">1</span>),itl=<span class="built_in">split</span>(l);</span><br><span class="line">	odt.<span class="built_in">erase</span>(itl,itr);</span><br><span class="line">	odt.<span class="built_in">insert</span>(<span class="built_in">Node</span>(l,r,v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll l,ll r,ll v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> itr=<span class="built_in">split</span>(r+<span class="number">1</span>),itl=<span class="built_in">split</span>(l);</span><br><span class="line">	<span class="keyword">for</span>(;itl!=itr;++itl) &#123;</span><br><span class="line">		itl-&gt;v+=v;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll seed;</span><br><span class="line"><span class="function">ll <span class="title">kth</span><span class="params">(ll l,ll r,ll k)</span></span>&#123;</span><br><span class="line">	vector&lt;pair&lt;ll,ll&gt; &gt; v;</span><br><span class="line">	<span class="keyword">auto</span> itr=<span class="built_in">split</span>(r+<span class="number">1</span>),itl=<span class="built_in">split</span>(l);</span><br><span class="line">	<span class="keyword">for</span>(;itl!=itr;++itl) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(itl-&gt;v,itl-&gt;r-itl-&gt;l+<span class="number">1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">		k-=v[i].second;</span><br><span class="line">		<span class="keyword">if</span>(k&lt;=<span class="number">0</span>) <span class="keyword">return</span> v[i].first;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rnd</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">ret</span><span class="params">(seed)</span></span>;</span><br><span class="line">	seed=(seed * <span class="number">7</span> + <span class="number">13</span>)%<span class="number">1000000007</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll p,ll mod)</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">	a%=mod;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p&amp;<span class="number">1</span>)&#123;</span><br><span class="line">            ans=(ans*a)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        a=(a*a)%mod;</span><br><span class="line">        p&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ask</span><span class="params">(ll l,ll r,ll x,ll y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> itr=<span class="built_in">split</span>(r+<span class="number">1</span>),itl=<span class="built_in">split</span>(l);</span><br><span class="line">	ll ret=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;itl!=itr;++itl) &#123;</span><br><span class="line">		ret=(ret+(itl-&gt;r-itl-&gt;l+<span class="number">1</span>)*<span class="built_in">qpow</span>(itl-&gt;v,x,y))%y;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ll m,vmax;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld%lld&quot;</span>,&amp;n,&amp;m,&amp;seed,&amp;vmax);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		ll r=<span class="built_in">rnd</span>();</span><br><span class="line">		odt.<span class="built_in">insert</span>(<span class="built_in">Node</span>(i,i,(r%vmax)+<span class="number">1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">		ll op=(<span class="built_in">rnd</span>()%<span class="number">4</span>)+<span class="number">1</span>;</span><br><span class="line">		ll l=<span class="built_in">rnd</span>()%n+<span class="number">1</span>;</span><br><span class="line">		ll r=<span class="built_in">rnd</span>()%n+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(l&gt;r) <span class="built_in">swap</span>(l,r);</span><br><span class="line">		ll x;</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="number">3</span>)&#123;x=<span class="built_in">rnd</span>()%(r-l+<span class="number">1</span>)+<span class="number">1</span>;&#125;<span class="keyword">else</span>&#123;x=(<span class="built_in">rnd</span>()%vmax)+<span class="number">1</span>;&#125;</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="built_in">add</span>(l,r,x);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)&#123;</span><br><span class="line">			<span class="built_in">assign</span>(l,r,x);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">3</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">kth</span>(l,r,x));</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">4</span>)&#123;</span><br><span class="line">			ll y=<span class="built_in">rnd</span>()%vmax+<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">ask</span>(l,r,x,y));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>BZOJ1858</p>
<p>0 l r 把 [l, r]区间内的所有数全变成 0</p>
<p>1 l r 把 [l, r] 区间内的所有数全变成 1</p>
<p>2 l r 把 [l,r] 区间内的所有数全部取反，也就是说把所有的 0 变成 1，把所有的 1 变成 0</p>
<p>3 l r 询问 [l, r] 区间内总共有多少个 1</p>
<p>4 l r 询问 [l, r] 区间内最多有多少个连续的 1 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">  ll l, r;<span class="comment">//闭区间！</span></span><br><span class="line">  <span class="keyword">mutable</span> ll v;<span class="comment">//mutable让我们可以在后面的操作中修改 v 的值</span></span><br><span class="line">  <span class="comment">//可以直接修改已经插入 set 的元素的 v 值，而不用将该元素取出后重新加入 set</span></span><br><span class="line">  <span class="built_in">Node</span>(<span class="keyword">const</span> ll &amp;il, <span class="keyword">const</span> ll &amp;ir, <span class="keyword">const</span> ll &amp;iv):<span class="built_in">l</span>(il),<span class="built_in">r</span>(ir),<span class="built_in">v</span>(iv)&#123;&#125;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;o)<span class="keyword">const</span>&#123;<span class="keyword">return</span> l&lt;o.l;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;Node&gt; odt;</span><br><span class="line"><span class="comment">//包含点 x的区间（设为 [l,r)）分裂为两个区间[l,x)和[x,r)并返回指向后者的迭代器</span></span><br><span class="line">ll n;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">split</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x&gt;n) <span class="keyword">return</span> odt.<span class="built_in">end</span>();</span><br><span class="line">	<span class="keyword">auto</span> it=--odt.<span class="built_in">upper_bound</span>((Node)&#123;x, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">	<span class="keyword">if</span>(it-&gt;l==x) <span class="keyword">return</span> it;</span><br><span class="line">	ll l=it-&gt;l,r=it-&gt;r,v=it-&gt;v;</span><br><span class="line">	odt.<span class="built_in">erase</span>(it);</span><br><span class="line">	odt.<span class="built_in">insert</span>(<span class="built_in">Node</span>(l,x<span class="number">-1</span>,v));</span><br><span class="line">	<span class="keyword">return</span> odt.<span class="built_in">insert</span>(<span class="built_in">Node</span>(x,r,v)).first;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">assign</span><span class="params">(ll l, ll r, ll v)</span></span>&#123;<span class="comment">//区间赋值 </span></span><br><span class="line">	<span class="keyword">auto</span> itr=<span class="built_in">split</span>(r+<span class="number">1</span>),itl=<span class="built_in">split</span>(l);</span><br><span class="line">	odt.<span class="built_in">erase</span>(itl,itr);</span><br><span class="line">	odt.<span class="built_in">insert</span>(<span class="built_in">Node</span>(l,r,v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flipv</span><span class="params">(ll l,ll r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> itr=<span class="built_in">split</span>(r+<span class="number">1</span>),itl=<span class="built_in">split</span>(l);</span><br><span class="line">	<span class="keyword">for</span>(;itl!=itr;++itl) &#123;</span><br><span class="line">		itl-&gt;v^=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ask1</span><span class="params">(ll l,ll r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> itr=<span class="built_in">split</span>(r+<span class="number">1</span>),itl=<span class="built_in">split</span>(l);</span><br><span class="line">    ll ret=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;itl!=itr;++itl) &#123;</span><br><span class="line">		<span class="keyword">if</span>(itl-&gt;v==<span class="number">1</span>)&#123;</span><br><span class="line">            ret+=itl-&gt;r-itl-&gt;l+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ask2</span><span class="params">(ll l,ll r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> itr=<span class="built_in">split</span>(r+<span class="number">1</span>),itl=<span class="built_in">split</span>(l);</span><br><span class="line">    ll ret=<span class="number">0</span>,pre=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;itl!=itr;++itl) &#123;</span><br><span class="line">		<span class="keyword">if</span>(itl-&gt;v==<span class="number">1</span>)&#123;</span><br><span class="line">            ret=<span class="built_in">max</span>(ret,pre=pre+itl-&gt;r-itl-&gt;l+<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pre=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getint</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">for</span>(c=<span class="built_in">getchar</span>();c&gt;<span class="string">&#x27;9&#x27;</span>||c&lt;<span class="string">&#x27;0&#x27;</span>;c=<span class="built_in">getchar</span>());</span><br><span class="line">    <span class="keyword">for</span>(x=<span class="number">0</span>;c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>;c=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">1</span>,val;</span><br><span class="line">    <span class="built_in">getint</span>(val);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;<span class="comment">//区间初始化</span></span><br><span class="line">        ll x;<span class="built_in">getint</span>(x);</span><br><span class="line">        <span class="keyword">if</span>(x!=val)&#123;</span><br><span class="line">		    odt.<span class="built_in">insert</span>(<span class="built_in">Node</span>(pos,i<span class="number">-1</span>,val));</span><br><span class="line">            pos=i;</span><br><span class="line">            val=x;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">    odt.<span class="built_in">insert</span>(<span class="built_in">Node</span>(pos,n,val));</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        ll op,l,r;</span><br><span class="line">        <span class="built_in">getint</span>(op);<span class="built_in">getint</span>(l);<span class="built_in">getint</span>(r);</span><br><span class="line">        ++l,++r;</span><br><span class="line">        <span class="keyword">if</span>(op&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">assign</span>(l,r,op);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">flipv</span>(l,r);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">ask1</span>(l,r));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">ask2</span>(l,r));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>luogu P4979</p>
<p>assign 操作需要优化才能通过 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">  ll l, r;</span><br><span class="line">  <span class="keyword">mutable</span> ll v;<span class="comment">//mutable让我们可以在后面的操作中修改 v 的值</span></span><br><span class="line">  <span class="comment">//可以直接修改已经插入 set 的元素的 v 值，而不用将该元素取出后重新加入 set</span></span><br><span class="line">  <span class="built_in">Node</span>(<span class="keyword">const</span> ll &amp;il, <span class="keyword">const</span> ll &amp;ir, <span class="keyword">const</span> ll &amp;iv):<span class="built_in">l</span>(il),<span class="built_in">r</span>(ir),<span class="built_in">v</span>(iv)&#123;&#125;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;o)<span class="keyword">const</span>&#123;<span class="keyword">return</span> l&lt;o.l;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;Node&gt; odt;</span><br><span class="line"><span class="comment">//包含点 x的区间（设为 [l,r)）分裂为两个区间[l,x)和[x,r)并返回指向后者的迭代器</span></span><br><span class="line">ll n;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">split</span><span class="params">(<span class="keyword">const</span> ll &amp;x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x&gt;n) <span class="keyword">return</span> odt.<span class="built_in">end</span>();</span><br><span class="line">	<span class="keyword">auto</span> it=--odt.<span class="built_in">upper_bound</span>((Node)&#123;x, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">	<span class="keyword">if</span>(it-&gt;l==x) <span class="keyword">return</span> it;</span><br><span class="line">	ll l=it-&gt;l,r=it-&gt;r,v=it-&gt;v;</span><br><span class="line">	odt.<span class="built_in">erase</span>(it);</span><br><span class="line">	odt.<span class="built_in">insert</span>(<span class="built_in">Node</span>(l,x<span class="number">-1</span>,v));</span><br><span class="line">	<span class="keyword">return</span> odt.<span class="built_in">insert</span>(<span class="built_in">Node</span>(x,r,v)).first;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">assign</span><span class="params">(ll l,ll r,<span class="keyword">const</span> ll &amp;v)</span></span>&#123;<span class="comment">//区间赋值 </span></span><br><span class="line">    set&lt;Node&gt;::iterator itr;</span><br><span class="line">    <span class="keyword">if</span>(r==n)&#123;</span><br><span class="line">        itr=odt.<span class="built_in">end</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        itr=--odt.<span class="built_in">upper_bound</span>((Node)&#123;r+<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="keyword">if</span>(itr-&gt;v==v)&#123;</span><br><span class="line">            r=itr-&gt;r;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(itr-&gt;l!=r+<span class="number">1</span>)&#123;</span><br><span class="line">                ll tl=itr-&gt;l,tr=itr-&gt;r,tv=itr-&gt;v;</span><br><span class="line">                odt.<span class="built_in">erase</span>(itr);</span><br><span class="line">                odt.<span class="built_in">insert</span>(<span class="built_in">Node</span>(tl,r,tv));</span><br><span class="line">                itr=odt.<span class="built_in">insert</span>(<span class="built_in">Node</span>(r+<span class="number">1</span>,tr,tv)).first;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> itl=--odt.<span class="built_in">upper_bound</span>((Node)&#123;l, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">if</span>(itl-&gt;v==v)&#123;</span><br><span class="line">        l=itl-&gt;l;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(itl-&gt;l!=l)&#123;</span><br><span class="line">            ll tl=itl-&gt;l,tr=itl-&gt;r,tv=itl-&gt;v;</span><br><span class="line">            odt.<span class="built_in">erase</span>(itl);</span><br><span class="line">            odt.<span class="built_in">insert</span>(<span class="built_in">Node</span>(tl,l<span class="number">-1</span>,tv));</span><br><span class="line">            itl=odt.<span class="built_in">insert</span>(<span class="built_in">Node</span>(l,tr,tv)).first;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	odt.<span class="built_in">erase</span>(itl,itr);</span><br><span class="line">	odt.<span class="built_in">insert</span>(<span class="built_in">Node</span>(l,r,v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ask</span><span class="params">(<span class="keyword">const</span> ll &amp;l,<span class="keyword">const</span> ll &amp;r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> itr=<span class="built_in">split</span>(r+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">auto</span> itl=<span class="built_in">split</span>(l);</span><br><span class="line">    <span class="keyword">int</span> vn=itl-&gt;v,vp=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(itl!=odt.<span class="built_in">begin</span>())&#123;</span><br><span class="line">        <span class="keyword">auto</span> it=itl;</span><br><span class="line">        --it;</span><br><span class="line">        vp=it-&gt;v;</span><br><span class="line">    &#125;</span><br><span class="line">    ++itl;</span><br><span class="line">    <span class="keyword">for</span>(;itl!=itr;++itl)&#123;</span><br><span class="line">        <span class="keyword">if</span>(itl-&gt;v!=vn)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(itl!=odt.<span class="built_in">end</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span>(itl-&gt;v==vp)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getint</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">for</span>(c=<span class="built_in">getchar</span>();c&gt;<span class="string">&#x27;9&#x27;</span>||c&lt;<span class="string">&#x27;0&#x27;</span>;c=<span class="built_in">getchar</span>());</span><br><span class="line">    <span class="keyword">for</span>(x=<span class="number">0</span>;c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>;c=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">recd</span><span class="params">(<span class="keyword">char</span> &amp;o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> ((o = <span class="built_in">getchar</span>()) &lt; <span class="string">&#x27;A&#x27;</span> || o &gt; <span class="string">&#x27;Z&#x27;</span>); <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">500000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">getint</span>(n);</span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> val=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(val&lt;<span class="string">&#x27;A&#x27;</span>||val&gt;<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">        val=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">if</span>(c!=val)&#123;</span><br><span class="line">            odt.<span class="built_in">insert</span>(<span class="built_in">Node</span>(pos,i<span class="number">-1</span>,val-<span class="string">&#x27;A&#x27;</span>));</span><br><span class="line">            pos=i;</span><br><span class="line">            val=c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    odt.<span class="built_in">insert</span>(<span class="built_in">Node</span>(pos,n,val-<span class="string">&#x27;A&#x27;</span>));</span><br><span class="line">    <span class="keyword">int</span> m,l,r;</span><br><span class="line">    <span class="keyword">char</span> op;</span><br><span class="line">    <span class="built_in">getint</span>(m);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="built_in">recd</span>(op);</span><br><span class="line">        <span class="built_in">getint</span>(l);<span class="built_in">getint</span>(r);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">recd</span>(op);</span><br><span class="line">            <span class="built_in">assign</span>(l,r,op-<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="built_in">ask</span>(l,r)?<span class="string">&quot;Yes&quot;</span>:<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>等差数列Arithmetic Progressions题解(USACO1.4)</title>
    <url>/20171019/%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97Arithmetic%20Progressions%E9%A2%98%E8%A7%A3(USACO1.4)/</url>
    <content><![CDATA[<h2 id="arithmetic-progressions-usaco1.4">Arithmetic Progressions USACO1.4</h2>
<p>An arithmetic progression is a sequence of the form a, a+b, a+2b, ..., a+nb where n=0,1,2,3,... . For this problem, a is a non-negative integer and b is a positive integer.</p>
<p>Write a program that finds all arithmetic progressions of length n in the set S of bisquares. The set of bisquares is defined as the set of all integers of the form p2 + q2 (where p and q are non-negative integers).</p>
<p>INPUT: N (3 &lt;= N &lt;= 25), the length of progressions for which to search M (1 &lt;= M &lt;= 250), an upper bound to limit the search to the bisquares with 0 &lt;= p,q &lt;= M.<br />
OUTPUT: If no sequence is found, a single line reading `NONE'. Otherwise, output one or more lines, each with two integers: the first element in a found sequence and the difference between consecutive elements in the same sequence. The lines should be ordered with smallest-difference sequences first and smallest starting number within those sequences first.<br />
There will be no more than 10,000 sequences.</p>
<p>此题目需要一些小的剪枝，详见注释。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rint register int</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">100000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[MAXN];</span><br><span class="line"><span class="keyword">int</span> aa[<span class="number">10005</span>],bb[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">bool</span> tab[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,m,cnt,tot,mx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;ariprog.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;ariprog.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(rint i=<span class="number">0</span>;i&lt;=m;++i)</span><br><span class="line">		<span class="keyword">for</span>(rint j=<span class="number">0</span>;j&lt;=m;++j)</span><br><span class="line">			a[++cnt]=i*i+j*j,tab[a[cnt]]=<span class="number">1</span>;<span class="comment">//预处理双平方数表，快速查表</span></span><br><span class="line">	<span class="built_in">sort</span>(a+<span class="number">1</span>,a+cnt);</span><br><span class="line">	cnt=<span class="built_in">unique</span>(a+<span class="number">1</span>,a+cnt+<span class="number">1</span>)-a<span class="number">-1</span>;</span><br><span class="line">	mx=m*m&lt;&lt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> r=mx/(n<span class="number">-1</span>);<span class="comment">//公差上界，最大的数除以要求的长度</span></span><br><span class="line">	<span class="keyword">for</span>(rint i=<span class="number">1</span>;i&lt;=r;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(rint j=<span class="number">1</span>;j&lt;=cnt;++j)</span><br><span class="line">		&#123;</span><br><span class="line">			rint c=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(rint k=n<span class="number">-1</span>;k&gt;<span class="number">0</span>&amp;&amp;a[j]+i*k&lt;=mx;--k)<span class="comment">//若超过max退出循环</span></span><br><span class="line">                <span class="comment">//从大到小枚举，不符合情况易退出</span></span><br><span class="line">				<span class="keyword">if</span>(!tab[a[j]+i*k]) <span class="comment">//若有一个不符合条件即break</span></span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">else</span> ++c;</span><br><span class="line">			<span class="keyword">if</span>(c==n<span class="number">-1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				aa[++tot]=a[j];</span><br><span class="line">				bb[tot]=i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(tot==<span class="number">0</span>)</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;NONE&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;++i)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,aa[i],bb[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>线性基学习记录</title>
    <url>/20211008/%E7%BA%BF%E6%80%A7%E5%9F%BA%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>向量空间:给定域<span class="math inline">\(F\)</span>，<span class="math inline">\(F\)</span>上的向量空间<span class="math inline">\(V\)</span>是一个集合，其上定义加法和数乘运算且这两个运算满足八个公理。</p>
<p>线性无关:对于向量空间中<span class="math inline">\(V\)</span>上<span class="math inline">\(n\)</span>个元素的向量组<span class="math inline">\((\mathbf{v}_1, \ldots, \mathbf{v}_n)\)</span>,若存在不全为<span class="math inline">\(0\)</span>的数<span class="math inline">\(a_i \in F\)</span>满足 <span class="math display">\[
a_{1}\mathbf{v}_{1}+a_{2}\mathbf {v}_{2}+\ldots +a_{n}\mathbf{v}_{n} = 0
\]</span></p>
<p>则称这<span class="math inline">\(n\)</span>个向量线性相关（linearly dependent），否则称为线性无关（linearly independent）。</p>
<p>线性组合:对于向量空间中 V 上 nn 个元素的向量组<span class="math inline">\((\mathbf{v}_1, \ldots, \mathbf{v}_n)\)</span>，其线性组合（linear combination）是如下形式的向量</p>
<p><span class="math display">\[
a_{1}\mathbf{v}_{1} + a_{2}\mathbf {v} _{2}+\ldots +a_{n}\mathbf {v} _{n}
\]</span> ​​ 其中<span class="math inline">\(a_1, \ldots, a_n \in F\)</span></p>
<p>一组向量线性无关 <span class="math inline">\(\Leftrightarrow\)</span>没有向量可用有限个其他向量的线性组合所表示</p>
<p>张成:对于向量空间中 <span class="math inline">\(V\)</span> 上 <span class="math inline">\(n\)</span> 个元素的向量组 <span class="math inline">\((\mathbf{v}_1, \ldots, \mathbf{v}_n)\)</span>，其所有线性组合所构成的集合称为 <span class="math inline">\((\mathbf{v}_1, \ldots, \mathbf{v}_n)\)</span>的张成（span），记为 <span class="math inline">\(\mathrm{span}(\mathbf{v}_1, \ldots, \mathbf{v}_n)\)</span></p>
<p>基:若向量空间 <span class="math inline">\(V\)</span> 中向量组 <span class="math inline">\(\mathfrak{B}\)</span> 既是线性无关的又可以张成 <span class="math inline">\(V\)</span>，则称其为<span class="math inline">\(V\)</span> 的基（basis）。</p>
<p><span class="math inline">\(\mathfrak{B}\)</span>中的元素称为基向量。如果基中元素个数有限，就称向量空间为有限维向量空间，将元素的个数称作向量空间的维数。</p>
<p>设 <span class="math inline">\(\mathfrak {B}\)</span> 是向量空间 <span class="math inline">\(V\)</span> 的基。则<span class="math inline">\(\mathfrak {B}\)</span>具有以下性质：</p>
<p>1.<span class="math inline">\(V\)</span> 是 <span class="math inline">\(\mathfrak {B}\)</span>的极小生成集，就是说只有<span class="math inline">\(\mathfrak {B}\)</span>能张成<span class="math inline">\(V\)</span>，而它的任何真子集都不张成全部的向量空间。</p>
<p>2.<span class="math inline">\(\mathfrak {B}\)</span> 是 <span class="math inline">\(V\)</span> 中线性无关向量的极大集合，就是说 <span class="math inline">\(\mathfrak {B}\)</span> 在<span class="math inline">\(V\)</span> 中是线性无关集合，而且<span class="math inline">\(V\)</span> 中没有其他线性无关集合包含它作为真子集。</p>
<p>3.<span class="math inline">\(V\)</span> 中所有的向量都可以按唯一的方式表达为<span class="math inline">\(\mathfrak {B}\)</span> 中向量的线性组合。</p>
<p>异或运算下的基} $</p>
<p>对于数 <span class="math inline">\(a_0, a_1, \ldots, a_n\)</span>，将 <span class="math inline">\(a_i\)</span>的二进制表示$ (b_{m}b_0)_2$​ 看作一个向量。向量组 <span class="math inline">\(\mathbf{a}_1, \ldots, \mathbf{a}_n\)</span>可以张成一个向量集合 <span class="math inline">\(\mathrm{span}(\mathbf{a}_1, \ldots, \mathbf{a}_n)\)</span>，加上我们的异或运算和乘法运算（显然满足 8 条公理），即可形成一个向量空间 <span class="math inline">\(V = (\{0, 1\}, \mathrm{span}(\mathbf{a}_1, \ldots, \mathbf{a}_n), \oplus, \cdot)\)</span></p>
<p>设集合<span class="math inline">\(S\)</span>中最大的数在二进制意义下有<span class="math inline">\(L\)</span>位，我们使用一个 <span class="math inline">\([0\dots L]\)</span>的数组<span class="math inline">\(a\)</span>来储存线性基。</p>
<p>这种线性基的构造方法保证了一个特殊性质，对于每一个<span class="math inline">\(i\)</span>,<span class="math inline">\(a_i\)</span>有以下两种可能：</p>
<ul>
<li><p><span class="math inline">\(a_i=0\)</span>，并且 只有} <span class="math inline">\(满足\)</span>j&lt;i<span class="math inline">\(的\)</span>a_j<span class="math inline">\(（即\)</span>a_i<span class="math inline">\(前面所有数）的第\)</span>i$个二进制位一定为<span class="math inline">\(0\)</span>。</p></li>
<li><p><span class="math inline">\(a_i\neq0\)</span>,并且</p></li>
</ul>
<ol type="1">
<li>整个<span class="math inline">\(a\)</span>数组只有<span class="math inline">\(a_i\)</span>的第<span class="math inline">\(i\)</span>个二进制位为<span class="math inline">\(1\)</span>；</li>
<li><span class="math inline">\(a_i\)</span>更高的二进制位一定为1</li>
</ol>
<p>（如果排成矩阵，形成一个下三角矩阵）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXL=<span class="number">60</span>;</span><br><span class="line">ll a[MAXL+<span class="number">1</span>];<span class="keyword">int</span> lbsiz;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(ll t)</span></span>&#123;<span class="comment">//高斯消元解出的对角矩阵的非零行构成的向量组 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=MAXL;j&gt;=<span class="number">0</span>;--j)&#123;<span class="comment">// 逆序枚举二进制位</span></span><br><span class="line">        <span class="keyword">if</span>(!((t&gt;&gt;j)&amp;<span class="number">1</span>)) <span class="keyword">continue</span>;<span class="comment">// 如果 t 的第 j 位为 0，则跳过</span></span><br><span class="line">        <span class="keyword">if</span>(a[j]) t^=a[j];</span><br><span class="line">        <span class="keyword">else</span>&#123;<span class="comment">// 找到可以插入 a[j] 的位置</span></span><br><span class="line">            <span class="comment">// 用 a[0...j - 1] 消去 t 的第 [0, j) 位上的 1</span></span><br><span class="line"><span class="comment">// 如果某一个a[k]=0也无须担心，因为这时候第k位不存在于线性基中，不需要保证t的第k位为 0	</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;j;++k) <span class="keyword">if</span>((t&gt;&gt;k)&amp;<span class="number">1</span>) t^=a[k];</span><br><span class="line">            <span class="comment">// 用 t 消去 a[j + 1...L] 的第 j 位上的 1</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>;k&lt;=MAXL;++k) <span class="keyword">if</span>((a[k]&gt;&gt;j)&amp;<span class="number">1</span>) a[k]^=t;</span><br><span class="line">                <span class="comment">// 插入到 a[j] 的位置上</span></span><br><span class="line">            a[j]=t;++lbsiz;</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">// 不要忘记，结束插入过程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最大异或和：将线性基中所有向量异或起来得到的向量所对应的数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">querymax</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=MAXL;++i) res^=a[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>集合任选大于1个元素异或出的第k大数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;ll&gt; v;</span><br><span class="line"><span class="keyword">bool</span> zero;<span class="keyword">int</span> n;<span class="comment">//zero: 是否能异或出0</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    lbsiz=<span class="number">0</span>;</span><br><span class="line">    v.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>&#123;</span><br><span class="line">    zero=(lbsiz!=n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=MAXL;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]) v.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(zero) --k;</span><br><span class="line">    <span class="keyword">if</span>(k&gt;=(<span class="number">1ll</span>&lt;&lt;v.<span class="built_in">size</span>())) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=MAXL;i&gt;=<span class="number">0</span>;--i) <span class="keyword">if</span>((k&gt;&gt;i)&amp;<span class="number">1</span>) res^=v[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> ttt=<span class="number">1</span>;ttt&lt;=T;++ttt)&#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);ll t;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;t);</span><br><span class="line">            <span class="built_in">insert</span>(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">prepare</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case #%d:\n&quot;</span>,ttt);</span><br><span class="line">        <span class="keyword">int</span> q;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q);</span><br><span class="line">        <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;t);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">query</span>(t));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="p4151-wc2011最大xor和路径">P4151 [WC2011]最大XOR和路径</h2>
<p>异或路径问题：转化成任意一条路径，和任意个圈的异或。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">200000</span>+<span class="number">5</span>,N=<span class="number">50000</span>+<span class="number">5</span>,MAXL=<span class="number">60</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> t,n;</span><br><span class="line">	ll v;</span><br><span class="line">&#125;e[M];</span><br><span class="line"><span class="keyword">int</span> hd[N],cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t,ll v)</span></span>&#123;</span><br><span class="line">	e[++cnt]=(Edge)&#123;t,hd[f],v&#125;;</span><br><span class="line">	hd[f]=cnt;</span><br><span class="line">&#125;</span><br><span class="line">ll a[MAXL+<span class="number">3</span>],dis[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(ll t)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=MAXL;j&gt;=<span class="number">0</span>;--j)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!((t&gt;&gt;j)&amp;<span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span>(a[j]) t^=a[j];</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;j;++k)&#123;</span><br><span class="line">				<span class="keyword">if</span>((t&gt;&gt;k)&amp;<span class="number">1</span>) t^=a[k];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>;k&lt;=MAXL;++k)&#123;</span><br><span class="line">				<span class="keyword">if</span>((a[k]&gt;&gt;j)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">					a[k]^=t;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			a[j]=t;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,ll now)</span></span>&#123;</span><br><span class="line">	dis[u]=now;vis[u]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=e[i].n)&#123;</span><br><span class="line">		<span class="keyword">int</span> v=e[i].t;</span><br><span class="line">		<span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">			<span class="built_in">dfs</span>(v,now^e[i].v);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">insert</span>(now^e[i].v^dis[v]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=MAXL;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">		<span class="keyword">if</span>((x^a[i])&gt;x)&#123;</span><br><span class="line">			x^=a[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">int</span> a,b;ll d;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>,&amp;a,&amp;b,&amp;d);</span><br><span class="line">		<span class="built_in">build</span>(a,b,d);</span><br><span class="line">		<span class="built_in">build</span>(b,a,d);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="built_in">query</span>(dis[n]));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="p4301-cqoi2013-新nim游戏">P4301 [CQOI2013] 新Nim游戏</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">40</span>],d[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;d[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(d+<span class="number">1</span>,d+n+<span class="number">1</span>,greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="keyword">int</span> t=d[i];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">31</span>;j&gt;=<span class="number">0</span>;--j)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!((t&gt;&gt;j)&amp;<span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(a[j]) t^=a[j];</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				a[j]=t;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!t) ans+=d[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="p3292-scoi2016幸运数字">P3292 [SCOI2016]幸运数字</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">20000</span>+<span class="number">5</span>,MAXL=<span class="number">61</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> t,n;</span><br><span class="line">&#125;e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> hd[N],cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">	e[++cnt]=(Edge)&#123;t,hd[f]&#125;;</span><br><span class="line">	hd[f]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Lbasis</span>&#123;</span><span class="comment">//Linear Basis </span></span><br><span class="line">	ll a[MAXL+<span class="number">1</span>];</span><br><span class="line">	<span class="built_in">Lbasis</span>()&#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);&#125;</span><br><span class="line">	<span class="built_in">Lbasis</span>(<span class="keyword">const</span> Lbasis&amp; b)&#123;<span class="built_in">memcpy</span>(a,b.a,<span class="keyword">sizeof</span> a);&#125; </span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(ll t)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=MAXL;j&gt;=<span class="number">0</span>;--j)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!((t&gt;&gt;j)&amp;<span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(a[j]) t^=a[j];</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;j;++k)&#123;</span><br><span class="line">					<span class="keyword">if</span>((t&gt;&gt;k)&amp;<span class="number">1</span>) t^=a[k];</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>;k&lt;=MAXL;++k)&#123;</span><br><span class="line">					<span class="keyword">if</span>((a[k]&gt;&gt;j)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">						a[k]^=t;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				a[j]=t;</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">const</span> Lbasis &amp;b)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=MAXL;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(b.a[i])&#123;</span><br><span class="line">				<span class="built_in">insert</span>(b.a[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">ll <span class="title">max</span><span class="params">()</span></span>&#123;</span><br><span class="line">		ll res=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=MAXL;++i)&#123;</span><br><span class="line">			res^=a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;b[<span class="number">20</span>][N];</span><br><span class="line"><span class="keyword">int</span> dep[N],anc[<span class="number">20</span>][N];</span><br><span class="line">ll val[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	dep[u]=dep[f]+<span class="number">1</span>;</span><br><span class="line">	anc[<span class="number">0</span>][u]=f;</span><br><span class="line">	b[<span class="number">0</span>][u].<span class="built_in">insert</span>(val[u]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;anc[i<span class="number">-1</span>][u];++i)&#123;</span><br><span class="line">		anc[i][u]=anc[i<span class="number">-1</span>][anc[i<span class="number">-1</span>][u]];</span><br><span class="line">		b[i][u]=b[i<span class="number">-1</span>][u];</span><br><span class="line">		b[i][u].<span class="built_in">merge</span>(b[i<span class="number">-1</span>][anc[i<span class="number">-1</span>][u]]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=e[i].n)&#123;</span><br><span class="line">		<span class="keyword">int</span> v=e[i].t;</span><br><span class="line">		<span class="keyword">if</span>(v==f) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(dep[x]&lt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">	<span class="keyword">int</span> dd=dep[x]-dep[y];</span><br><span class="line">	Lbasis res;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(dd&amp;(<span class="number">1</span>&lt;&lt;i))&#123;</span><br><span class="line">			res.<span class="built_in">merge</span>(b[i][x]);</span><br><span class="line">			x=anc[i][x];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(x==y)&#123;</span><br><span class="line">		res.<span class="built_in">insert</span>(val[x]);</span><br><span class="line">		<span class="keyword">return</span> res.<span class="built_in">max</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(anc[i][x]!=anc[i][y])&#123;</span><br><span class="line">			res.<span class="built_in">merge</span>(b[i][x]);res.<span class="built_in">merge</span>(b[i][y]);</span><br><span class="line">			x=anc[i][x];y=anc[i][y];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	res.<span class="built_in">insert</span>(val[x]);res.<span class="built_in">insert</span>(val[y]);res.<span class="built_in">insert</span>(val[anc[<span class="number">0</span>][x]]);</span><br><span class="line">	<span class="keyword">return</span> res.<span class="built_in">max</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> q;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;q);</span><br><span class="line">	<span class="keyword">int</span> a,b;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;val[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">		<span class="built_in">build</span>(a,b);<span class="built_in">build</span>(b,a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="keyword">int</span> x,y;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">ask</span>(x,y));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>给你一个数组，求出有多少个非空子序列是等差数列</title>
    <url>/20210910/%E7%BB%99%E4%BD%A0%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%EF%BC%8C%E6%B1%82%E5%87%BA%E6%9C%89%E5%A4%9A%E5%B0%91%E4%B8%AA%E9%9D%9E%E7%A9%BA%E5%AD%90%E5%BA%8F%E5%88%97%E6%98%AF%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97/</url>
    <content><![CDATA[<h2 id="on2v算法"><span class="math inline">\(O(n^2v)\)</span>算法</h2>
<p>用<span class="math inline">\(f(i,j)\)</span>表示以位置i结尾，公差为j的等差数列有多少个。</p>
<p>转移的时候，枚举一个小于i的k，满足<span class="math inline">\(h_k+j= h_i\)</span></p>
<p>由f(k,j)转移到<span class="math inline">\(f(i,j)\)</span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],f[N][<span class="number">40005</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ofs=<span class="number">20001</span>,mod=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">-20001</span>;j&lt;=<span class="number">20001</span>;++j)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;i;++k)&#123;</span><br><span class="line">				<span class="keyword">if</span>(a[k]+j==a[i])&#123;</span><br><span class="line">					f[i][j+ofs]=(f[i][j+ofs]+f[k][j+ofs]+<span class="number">1</span>)%mod;</span><br><span class="line">				<span class="comment">//	printf(&quot;%d %d %d\n&quot;,a[k],a[i],f[i][j+ofs]);</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			ans=(ans+f[i][j+ofs])%mod;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,(ans+n)%mod);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="onv"><span class="math inline">\(O(nv)\)</span></h2>
<p>注意到前两重循环交换后不影响结果正确性。我们此时先枚举公差j。</p>
<p>考虑之前<span class="math inline">\(O(n^2v)\)</span>的算法转移的时候枚举一个小于i的k，然后当<span class="math inline">\(h_k = h_i- j\)</span>的时候从<span class="math inline">\(f(k,j)\)</span>转移到<span class="math inline">\(f(i,j)\)</span>。</p>
<p>我们发现，转移相当于一个求和，对小于i的所有高度等于<span class="math inline">\(h_i-j\)</span>的位置的<span class="math inline">\(f\)</span>值求和。</p>
<p>令<span class="math inline">\(g(t)\)</span>为<span class="math inline">\(\sum\limits_{1\leq k&lt;i,h_k-j=t}f(k,j)\)</span></p>
<p>其含义为<span class="math inline">\(h_1\)</span>到<span class="math inline">\(h_{i-1}\)</span>，有多少高度为t结尾的等差数列。</p>
<p>在转移时，<span class="math inline">\(f(i)=g(h_i-j)\)</span>,同时维护g的值，<span class="math inline">\(g(h_i)+=f(i)\)</span></p>
<p>每次状态转移由<span class="math inline">\(O(n)\)</span>优化到<span class="math inline">\(O(1)\)</span></p>
<p>对之前的代码稍作修改可通过该题,<span class="math inline">\(O(nv)\)</span>，如下。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],f[N][<span class="number">100005</span>],g[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ofs=<span class="number">40001</span>,mod=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">-20001</span>;j&lt;=<span class="number">20001</span>;++j)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span> g);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			f[i][j+ofs]=(f[i][j+ofs]+<span class="comment">/*f[k][j+ofs]+1*/</span>g[a[i]-j+ofs])%mod;</span><br><span class="line">			g[a[i]+ofs]=(g[a[i]+ofs]+f[i][j+ofs]+<span class="number">1</span>)%mod;</span><br><span class="line">			ans=(ans+f[i][j+ofs])%mod;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,(ans+n)%mod);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单优化冗余</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],f[N],g[<span class="number">80005</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ofs=<span class="number">40001</span>,mod=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">-20001</span>;j&lt;=<span class="number">20001</span>;++j)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span> g);</span><br><span class="line">		<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			f[i]=g[a[i]-j+ofs]%mod;</span><br><span class="line">			g[a[i]+ofs]=(g[a[i]+ofs]+f[i]+<span class="number">1</span>)%mod;</span><br><span class="line">			ans=(ans+f[i])%mod;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,(ans+n)%mod);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="真正解-on2">真·正解 <span class="math inline">\(O(n^2)\)</span></h2>
<p>出题人想复杂了，枚举公差不必。</p>
<p>枚举之前的数，作差得到公差即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],f[N][<span class="number">80005</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ofs=<span class="number">40001</span>,mod=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;++j)&#123;</span><br><span class="line">			<span class="keyword">int</span> d=a[j]-a[i];</span><br><span class="line">			f[i][d+ofs]+=f[j][d+ofs]+<span class="number">1</span>;</span><br><span class="line">			f[i][d+ofs]%=mod;</span><br><span class="line">			ans=(ans+f[j][d+ofs]+<span class="number">1</span>)%mod;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,(ans+n)%mod);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>计算系数(NOIP2011提高LuoguP1313)</title>
    <url>/20171030/%E8%AE%A1%E7%AE%97%E7%B3%BB%E6%95%B0(NOIP2011%E6%8F%90%E9%AB%98LuoguP1313)/</url>
    <content><![CDATA[<p>一道数论好题，知识点涉及扩展欧几里得，快速幂，逆元，二项式定理，模运算，组合数等。<br />
（<del>别问为啥打了快速幂不用费马小求逆元...我就练习下扩欧</del>）<br />
（<del>数据就应该再加大些卡掉n^2递推求组合数的</del>） <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">10007</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">exgcd</span>(b,a%b,x,y);</span><br><span class="line">	ll t=x;</span><br><span class="line">	x=y;</span><br><span class="line">	y=t-a/b*y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll x,y;</span><br><span class="line">	<span class="built_in">exgcd</span>(a,mod,x,y);</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">fac</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll ret=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">2</span>;i&lt;=x;++i)</span><br><span class="line">		ret*=i,ret%=mod;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (<span class="built_in">fac</span>(a)*<span class="built_in">inv</span>(<span class="built_in">fac</span>(b)*<span class="built_in">fac</span>(a-b))%mod+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(b==<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> a%mod;</span><br><span class="line">	ll t=<span class="built_in">qpow</span>(a,b&gt;&gt;<span class="number">1</span>);</span><br><span class="line">	t=(t*t)%mod;</span><br><span class="line">	<span class="keyword">if</span>(b&amp;<span class="number">1</span>)</span><br><span class="line">		t=(t*a)%mod;</span><br><span class="line">	<span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,b,k,n,m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;k,&amp;n,&amp;m);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,(ll)((<span class="built_in">C</span>(k,m)*<span class="built_in">qpow</span>(a,n)%mod)*<span class="built_in">qpow</span>(b,m)%mod+mod)%mod);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>贪吃蛇，C++</title>
    <url>/20200731/%E8%B4%AA%E5%90%83%E8%9B%87%EF%BC%8CC++/</url>
    <content><![CDATA[<p>好久之前写的，登陆博客看了下好久没更新了，就随手发出来吧。 用这份代码，QT套了个界面设置速度和地图大小。QT的代码就不发了hhh，毕竟源代码分好几个文件 <del>懒</del> 。 用了Windows.h 所以只能在Windows下运行。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;Windows.h&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;ctime&gt;</span><br><span class="line">#include&lt;cstdlib&gt;</span><br><span class="line">#include&lt;conio.h&gt;</span><br><span class="line">#include&lt;deque&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int MAXC&#x3D;100,MAXR&#x3D;100;</span><br><span class="line">typedef pair&lt;int,int&gt; pii;</span><br><span class="line"></span><br><span class="line">class Game&#123;</span><br><span class="line">public:</span><br><span class="line">    int mat[MAXC][MAXR];</span><br><span class="line">    int dx[5],dy[5];</span><br><span class="line">    deque&lt;pii&gt; q;</span><br><span class="line">    int d,col,row;</span><br><span class="line">    bool food;</span><br><span class="line">    HANDLE hOut;</span><br><span class="line">    void pt(int x, int y,char c)&#123;</span><br><span class="line">        COORD pos;</span><br><span class="line">        pos.X&#x3D;x*3+2;</span><br><span class="line">        pos.Y&#x3D;y*2+1;</span><br><span class="line">        SetConsoleCursorPosition(hOut, pos);</span><br><span class="line">        putchar(c);</span><br><span class="line">    &#125;</span><br><span class="line">    int dir()&#123;</span><br><span class="line">        char c1,c2;</span><br><span class="line">        if(!_kbhit())</span><br><span class="line">            return 4;</span><br><span class="line">        c1&#x3D;getch(),c2&#x3D;getch();</span><br><span class="line">        switch(c2)&#123;</span><br><span class="line">            case 72:return 1;&#x2F;&#x2F;up</span><br><span class="line">            case 75:return 0;&#x2F;&#x2F;left</span><br><span class="line">            case 77:return 3;&#x2F;&#x2F;right</span><br><span class="line">            case 80:return 2;&#x2F;&#x2F;down</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    void topblock()&#123;</span><br><span class="line">        printf(&quot;┌&quot;);</span><br><span class="line">        for(int i&#x3D;0;i&lt;col-1;++i)</span><br><span class="line">            printf(&quot;──┬&quot;);</span><br><span class="line">        puts(&quot;──┐&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    void buttonblock()&#123;</span><br><span class="line">        printf(&quot;└&quot;);</span><br><span class="line">        for(int i&#x3D;0;i&lt;col-1;++i)</span><br><span class="line">            printf(&quot;──┴&quot;);</span><br><span class="line">        puts(&quot;──┘&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    void commonblock()&#123;</span><br><span class="line">        printf(&quot;├&quot;);</span><br><span class="line">        for(int i&#x3D;0;i&lt;col-1;++i)</span><br><span class="line">            printf(&quot;──┼&quot;);</span><br><span class="line">        puts(&quot;──┤&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    void feed()</span><br><span class="line">    &#123;</span><br><span class="line">        while(!food)&#123;</span><br><span class="line">            int xx&#x3D;rand()%col,yy&#x3D;rand()%row;</span><br><span class="line">            if(!mat[xx][yy])&#123;</span><br><span class="line">                mat[xx][yy]&#x3D;2;</span><br><span class="line">                food&#x3D;1;</span><br><span class="line">                pt(xx,yy,&#39;*&#39;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Game()&#123;</span><br><span class="line">        row&#x3D;11,col&#x3D;11;&#x2F;&#x2F;settings</span><br><span class="line">        dx[0]&#x3D;dy[1]&#x3D;-1,dx[3]&#x3D;dy[2]&#x3D;1;</span><br><span class="line">        dx[1]&#x3D;dx[2]&#x3D;dy[0]&#x3D;dy[3]&#x3D;dx[4]&#x3D;dy[4]&#x3D;0;</span><br><span class="line">        d&#x3D;4;</span><br><span class="line">        food&#x3D;0;</span><br><span class="line">        hOut&#x3D;GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">    &#125;</span><br><span class="line">    void start()&#123;</span><br><span class="line">        system(&quot;chcp 437&quot;);</span><br><span class="line">        system(&quot;mode con:cols&#x3D;36 lines&#x3D;24&quot;);</span><br><span class="line">        system(&quot;chcp 65001&quot;);</span><br><span class="line">        print_init();</span><br><span class="line">        while(1)&#123;</span><br><span class="line">            if(!food)&#123;</span><br><span class="line">                feed();</span><br><span class="line">            &#125;</span><br><span class="line">            int t&#x3D;dir(),nx,ny;</span><br><span class="line">            pii tmp&#x3D;q.front();</span><br><span class="line">            if(t&#x3D;&#x3D;4||(t&#x3D;&#x3D;0&amp;&amp;d&#x3D;&#x3D;3)||(t&#x3D;&#x3D;3&amp;&amp;d&#x3D;&#x3D;0)||(t&#x3D;&#x3D;1&amp;&amp;d&#x3D;&#x3D;2)||(t&#x3D;&#x3D;2&amp;&amp;d&#x3D;&#x3D;1))&#123;</span><br><span class="line">                nx&#x3D;tmp.first+dx[d],ny&#x3D;tmp.second+dy[d];</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                nx&#x3D;tmp.first+dx[t],ny&#x3D;tmp.second+dy[t];</span><br><span class="line">                d&#x3D;t;</span><br><span class="line">            &#125;</span><br><span class="line">            bool death&#x3D;0;</span><br><span class="line">            if(nx&gt;&#x3D;0&amp;&amp;ny&gt;&#x3D;0&amp;&amp;nx&lt;row&amp;&amp;ny&lt;col)&#123;</span><br><span class="line">                if(mat[nx][ny]&#x3D;&#x3D;1)&#123;</span><br><span class="line">                    death&#x3D;1;</span><br><span class="line">                &#125;</span><br><span class="line">                else if(mat[nx][ny]&#x3D;&#x3D;2)&#123;</span><br><span class="line">                    pt(tmp.first,tmp.second,&#39;O&#39;);</span><br><span class="line">                    q.push_front(pii(nx,ny));</span><br><span class="line">                    pt(nx,ny,&#39;@&#39;);</span><br><span class="line">                    mat[nx][ny]&#x3D;1;</span><br><span class="line">                    food&#x3D;0;</span><br><span class="line">                &#125;</span><br><span class="line">                else&#123;</span><br><span class="line">                    pii tt&#x3D;q.back();</span><br><span class="line">                    q.pop_back();</span><br><span class="line">                    mat[tt.first][tt.second]&#x3D;0;</span><br><span class="line">                    pt(tt.first,tt.second,&#39; &#39;);</span><br><span class="line">                    q.push_front(pii(nx,ny));</span><br><span class="line">                    pt(tmp.first,tmp.second,&#39;O&#39;);</span><br><span class="line">                    pt(nx,ny,&#39;@&#39;);</span><br><span class="line">                    mat[nx][ny]&#x3D;1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                death&#x3D;1;</span><br><span class="line">            &#125;</span><br><span class="line">            if(death)&#123;</span><br><span class="line">               system(&quot;cls&quot;);</span><br><span class="line">               puts(&quot;你输了&quot;);</span><br><span class="line">               system(&quot;pause&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            Sleep(200);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    void print_init()&#123;</span><br><span class="line">        system(&quot;cls&quot;);</span><br><span class="line">        topblock();</span><br><span class="line">        for(int i&#x3D;0;i&lt;row;++i)&#123;</span><br><span class="line">            printf(&quot;│&quot;);</span><br><span class="line">            for(int j&#x3D;0;j&lt;col;++j)&#123;</span><br><span class="line">                printf(&quot;  │&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            puts(&quot;&quot;);</span><br><span class="line">            if(i&#x3D;&#x3D;row-1)</span><br><span class="line">                buttonblock();</span><br><span class="line">            else commonblock();</span><br><span class="line">        &#125;</span><br><span class="line">        int xx&#x3D;rand()%col,yy&#x3D;rand()%row;</span><br><span class="line">        q.push_front(pii(xx,yy));</span><br><span class="line">        mat[xx][yy]&#x3D;1;</span><br><span class="line">        pt(xx,yy,&#39;@&#39;);</span><br><span class="line">        while(1)&#123;</span><br><span class="line">            int td&#x3D;rand()%4;</span><br><span class="line">            int nx&#x3D;xx+dx[td],ny&#x3D;yy+dy[td];</span><br><span class="line">            if(nx&gt;&#x3D;0&amp;&amp;ny&gt;&#x3D;0&amp;&amp;nx&lt;row&amp;&amp;ny&lt;col)&#123;</span><br><span class="line">                q.push_back(pii(nx,ny));</span><br><span class="line">                mat[nx][ny]&#x3D;1;</span><br><span class="line">                pt(nx,ny,&#39;O&#39;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        feed();</span><br><span class="line">        while(1)&#123;</span><br><span class="line">            int ttt;</span><br><span class="line">            if((ttt&#x3D;dir())!&#x3D;4)&#123;</span><br><span class="line">                d&#x3D;ttt;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    srand((unsigned)time(0));</span><br><span class="line">    Game().start();</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>高斯消元矩阵树定理学习记录</title>
    <url>/20210326/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83%E7%9F%A9%E9%98%B5%E6%A0%91%E5%AE%9A%E7%90%86%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="高斯消元">高斯消元</h1>
<h3 id="模板-luogu-p3389">模板 luogu P3389</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">double</span> a[N][N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gauss</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> c,r;</span><br><span class="line">	<span class="keyword">for</span>(c=<span class="number">1</span>,r=<span class="number">1</span>;c&lt;=n;++c)&#123;</span><br><span class="line">		<span class="keyword">int</span> t=r;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=r;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">fabs</span>(a[i][c])&gt;<span class="built_in">fabs</span>(a[t][c]))&#123;</span><br><span class="line">				t=i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="comment">//选最大的（提高精度+将0交换到下面）</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">fabs</span>(a[t][c])&lt;eps) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=c;i&lt;=n+<span class="number">1</span>;++i) <span class="built_in">swap</span>(a[t][i],a[r][i]);<span class="comment">//交换到上部</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n+<span class="number">1</span>;i&gt;=c;--i) a[r][i]/=a[r][c];<span class="comment">//行首行列式数值变成1</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=r+<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">fabs</span>(a[i][c])&gt;eps)&#123;</span><br><span class="line">				<span class="keyword">double</span> d=a[i][c];</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=n+<span class="number">1</span>;j&gt;=c;--j)&#123;</span><br><span class="line">					a[i][j]-=a[r][j]*d;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		++r;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(r&lt;=n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=r;i&lt;=n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">fabs</span>(a[i][n+<span class="number">1</span>])&gt;eps)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;<span class="comment">//无解</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//没有唯一解</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;<span class="number">0</span>;--i)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">			a[i][n+<span class="number">1</span>]-=a[j][n+<span class="number">1</span>]*a[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n+<span class="number">1</span>;++j)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;a[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">gauss</span>()!=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>,a[i][n+<span class="number">1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;No Solution&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h3 id="icpc2020-jinan"><a href="https://ac.nowcoder.com/acm/contest/13548/A">ICPC2020 Jinan</a></h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[N][N],b[N][N];</span><br><span class="line"><span class="keyword">int</span> m[N][N];</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(p==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> a%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	ll ret=<span class="built_in">qpow</span>(a,p&gt;&gt;<span class="number">1</span>);</span><br><span class="line">	ret=(ret*ret)%mod;</span><br><span class="line">	<span class="keyword">if</span>(p&amp;<span class="number">1</span>) ret=(ret*a)%mod;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;++k)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(m,<span class="number">0</span>,<span class="keyword">sizeof</span> m);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">				m[i][j]^=a[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(b[i][k])&#123;</span><br><span class="line">				m[i][i]^=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> c,r;</span><br><span class="line">		<span class="keyword">for</span>(c=<span class="number">1</span>,r=<span class="number">1</span>;c&lt;=n;++c)&#123;</span><br><span class="line">			<span class="keyword">int</span> t=r;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=r;i&lt;=n;++i)&#123;</span><br><span class="line">				<span class="keyword">if</span>(m[i][c])&#123;</span><br><span class="line">					t=i;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(m[t][c]==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(t!=r)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=c;i&lt;=n;++i)&#123;</span><br><span class="line">					<span class="built_in">swap</span>(m[t][i],m[r][i]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=r+<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">				<span class="keyword">if</span>(m[i][c]!=<span class="number">0</span>)&#123;</span><br><span class="line">					<span class="keyword">int</span> d=m[i][c];</span><br><span class="line">					<span class="keyword">for</span>(<span class="keyword">int</span> j=n;j&gt;=c;--j)&#123;</span><br><span class="line">						m[i][j]=(m[i][j]-m[r][j]*d+<span class="number">4</span>)%<span class="number">2</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			++r;</span><br><span class="line">		&#125;</span><br><span class="line">		ans+=n-r+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="built_in">qpow</span>(<span class="number">2</span>,ans));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span class="math inline">\(mod 2\)</span>等价于异或，所以可以用bitset优化一个64的常数。</p>
<h1 id="矩阵树定理">矩阵树定理</h1>
<p>本章节的全部内容在 <strong><a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh">CC BY-SA 4.0</a> 和 <a href="https://github.com/zTrix/sata-license">SATA</a></strong> 协议之条款下提供，转自<a href="https://oi-wiki.org/graph/matrix-tree/">OIWIKI</a> Kirchhoff 矩阵树定理（简称矩阵树定理）解决了一张图的生成树个数计数问题。</p>
<h2 id="本篇记号声明">本篇记号声明</h2>
<p><strong>本篇中的图，无论无向还是有向，都允许重边，但是不允许自环。</strong></p>
<h3 id="无向图情况">无向图情况</h3>
<p>设 <span class="math inline">\(G\)</span> 是一个有 <span class="math inline">\(n\)</span> 个顶点的无向图。定义度数矩阵 <span class="math inline">\(D(G)\)</span> 为：</p>
<p><span class="math display">\[
D_{ii}(G) = \mathrm{deg}(i), D_{ij} = 0, i\neq j
\]</span></p>
<p>设 <span class="math inline">\(\#e(i,j)\)</span> 为点 <span class="math inline">\(i\)</span> 与点 <span class="math inline">\(j\)</span> 相连的边数，并定义邻接矩阵 <span class="math inline">\(A\)</span> 为：</p>
<p><span class="math display">\[
A_{ij}(G)=A_{ji}(G)=\#e(i,j), i\neq j
\]</span></p>
<p>定义 Laplace 矩阵（亦称 Kirchhoff 矩阵）<span class="math inline">\(L\)</span> 为：</p>
<p><span class="math display">\[
L(G) = D(G) - A(G)
\]</span></p>
<p>记图 <span class="math inline">\(G\)</span> 的所有生成树个数为 <span class="math inline">\(t(G)\)</span>。</p>
<h3 id="有向图情况">有向图情况</h3>
<p>设 <span class="math inline">\(G\)</span> 是一个有 <span class="math inline">\(n\)</span> 个顶点的有向图。定义出度矩阵 <span class="math inline">\(D^{out}(G)\)</span> 为：</p>
<p><span class="math display">\[
D^{out}_{ii}(G) = \mathrm{deg^{out}}(i), D^{out}_{ij} = 0, i\neq j
\]</span></p>
<p>类似地定义入度矩阵 <span class="math inline">\(D^{in}(G)\)</span></p>
<p>设 <span class="math inline">\(\#e(i,j)\)</span> 为点 <span class="math inline">\(i\)</span> 指向点 <span class="math inline">\(j\)</span> 的有向边数，并定义邻接矩阵 <span class="math inline">\(A\)</span> 为：</p>
<p><span class="math display">\[
A_{ij}(G)=\#e(i,j), i\neq j
\]</span></p>
<p>定义出度 Laplace 矩阵 <span class="math inline">\(L^{out}\)</span> 为：</p>
<p><span class="math display">\[
L^{out}(G) = D^{out}(G) - A(G)
\]</span></p>
<p>定义入度 Laplace 矩阵 <span class="math inline">\(L^{in}\)</span> 为：</p>
<p><span class="math display">\[
L^{in}(G) = D^{in}(G) - A(G)
\]</span></p>
<p>记图 <span class="math inline">\(G\)</span> 的以 <span class="math inline">\(r\)</span> 为根的所有根向树形图个数为 <span class="math inline">\(t^{root}(G,r)\)</span>。所谓根向树形图，是说这张图的基图是一棵树，所有的边全部指向父亲。</p>
<p>记图 <span class="math inline">\(G\)</span> 的以 <span class="math inline">\(r\)</span> 为根的所有叶向树形图个数为 <span class="math inline">\(t^{leaf}(G,r)\)</span>。所谓叶向树形图，是说这张图的基图是一棵树，所有的边全部指向儿子。</p>
<h2 id="定理叙述">定理叙述</h2>
<p>矩阵树定理具有多种形式。其中用得较多的是定理 1、定理 3 与定理 4。</p>
<p><strong>定理 1（矩阵树定理，无向图行列式形式）</strong> 对于任意的 <span class="math inline">\(i\)</span>，都有</p>
<p><span class="math display">\[
t(G) = \det L(G)\binom{1,2,\cdots,i-1,i+1,\cdots,n}{1,2,\cdots,i-1,i+1,\cdots,n}
\]</span></p>
<p>其中记号 <span class="math inline">\(L(G)\binom{1,2,\cdots,i-1,i+1,\cdots,n}{1,2,\cdots,i-1,i+1,\cdots,n}\)</span> 表示矩阵 <span class="math inline">\(L(G)\)</span> 的第 <span class="math inline">\(1,\cdots,i-1,i+1,\cdots,n\)</span> 行与第 <span class="math inline">\(1,\cdots,i-1,i+1,\cdots,n\)</span> 列构成的子矩阵(<em>原矩阵去掉第<span class="math inline">\(i\)</span>行同时去掉第<span class="math inline">\(i\)</span>列（<span class="math inline">\(1\leq i\leq n\)</span>），即矩阵的主子式</em>)。也就是说，无向图的 Laplace 矩阵具有这样的性质，它的所有 <span class="math inline">\(n-1\)</span> 阶主子式都相等。</p>
<p><strong>定理 2（矩阵树定理，无向图特征值形式）</strong> 设 <span class="math inline">\(\lambda_1, \lambda_2, \cdots, \lambda_{n-1}\)</span> 为 <span class="math inline">\(L(G)\)</span> 的 <span class="math inline">\(n - 1\)</span> 个非零特征值，那么有</p>
<p><span class="math inline">\(t(G) = \frac{1}{n}\lambda_1\lambda_2\cdots\lambda_{n-1}\)</span></p>
<p><strong>定理 3（矩阵树定理，有向图根向形式）</strong> 对于任意的 <span class="math inline">\(k\)</span>，都有</p>
<p><span class="math display">\[
t^{root}(G,k) = \det L^{out}(G)\binom{1,2,\cdots,k-1,k+1,\cdots,n}{1,2,\cdots,k-1,k+1,\cdots,n}
\]</span></p>
<p>因此如果要统计一张图所有的根向树形图，只要枚举所有的根 <span class="math inline">\(k\)</span> 并对 <span class="math inline">\(t^{root}(G,k)\)</span> 求和即可。</p>
<p><strong>定理 4（矩阵树定理，有向图叶向形式）</strong> 对于任意的 <span class="math inline">\(k\)</span>，都有</p>
<p><span class="math display">\[
t^{leaf}(G,k) = \det L^{in}(G)\binom{1,2,\cdots,k-1,k+1,\cdots,n}{1,2,\cdots,k-1,k+1,\cdots,n}
\]</span></p>
<p>因此如果要统计一张图所有的叶向树形图，只要枚举所有的根 <span class="math inline">\(k\)</span> 并对 <span class="math inline">\(t^{leaf}(G,k)\)</span> 求和即可。 ### 「HEOI2015」小 Z 的房间 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">105</span>;</span><br><span class="line"><span class="keyword">char</span> mp[N][N];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll L[N][N];</span><br><span class="line"><span class="keyword">int</span> id[N][N],cnt;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,mp[i]+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line">			<span class="keyword">if</span>(mp[i][j]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">				id[i][j]=++cnt;</span><br><span class="line">				<span class="keyword">if</span>(mp[i<span class="number">-1</span>][j]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">					L[id[i][j]][id[i<span class="number">-1</span>][j]]--;</span><br><span class="line">					L[id[i<span class="number">-1</span>][j]][id[i][j]]--;</span><br><span class="line">					L[id[i][j]][id[i][j]]++;</span><br><span class="line">					L[id[i<span class="number">-1</span>][j]][id[i<span class="number">-1</span>][j]]++;</span><br><span class="line">					</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(mp[i][j<span class="number">-1</span>]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">					L[id[i][j]][id[i][j<span class="number">-1</span>]]--;</span><br><span class="line">					L[id[i][j<span class="number">-1</span>]][id[i][j]]--;</span><br><span class="line">					L[id[i][j]][id[i][j]]++;</span><br><span class="line">					L[id[i][j<span class="number">-1</span>]][id[i][j<span class="number">-1</span>]]++;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> r=cnt<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r;++i)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=r;++j)&#123;</span><br><span class="line">			L[i][j]=(L[i][j]+mod)%mod;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ll ans=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r;++i)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=r;++j)&#123;</span><br><span class="line">			<span class="keyword">while</span>(L[j][i])&#123;</span><br><span class="line">				ll t=L[i][i]/L[j][i];</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;=r;++k)&#123;</span><br><span class="line">					L[i][k]=(L[i][k]-t*L[j][k]%mod+mod)%mod;</span><br><span class="line">					<span class="built_in">swap</span>(L[i][k],L[j][k]);</span><br><span class="line">				&#125;</span><br><span class="line">				ans*=<span class="number">-1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ans=ans*L[i][i]%mod;</span><br><span class="line">	&#125;</span><br><span class="line"> 	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,(ans+mod)%mod);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure> 注意处理整数时，写法的不同。</p>
<h3 id="luogu-p2144-fjoi2007轮状病毒">Luogu P2144 [FJOI2007]轮状病毒</h3>
<p>需要高精度 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">n=n+<span class="number">1</span></span><br><span class="line">a=[[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">2</span>)]<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">2</span>)]</span><br><span class="line">a[<span class="number">1</span>][<span class="number">1</span>]=n-<span class="number">1</span></span><br><span class="line">a[<span class="number">2</span>][n]=-<span class="number">1</span></span><br><span class="line">a[n][<span class="number">2</span>]=-<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">    a[i][<span class="number">1</span>]=-<span class="number">1</span></span><br><span class="line">    a[<span class="number">1</span>][i]=-<span class="number">1</span></span><br><span class="line">    a[i][i]=<span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span> i+<span class="number">1</span>&lt;=n :</span><br><span class="line">        a[i][i+<span class="number">1</span>]=-<span class="number">1</span></span><br><span class="line">        a[i+<span class="number">1</span>][i]=-<span class="number">1</span></span><br><span class="line">ans=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,n):</span><br><span class="line">        <span class="keyword">while</span> a[j][i]!=<span class="number">0</span>:</span><br><span class="line">            t=a[i][i]//a[j][i]</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(i,n):</span><br><span class="line">                a[i][k]-=t*a[j][k]</span><br><span class="line">                a[i][k],a[j][k]=a[j][k],a[i][k]</span><br><span class="line">            ans=-ans</span><br><span class="line">    ans*=a[i][i]</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>十月第一周学习记录</title>
    <url>/20211005/%E5%8D%81%E6%9C%88%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="section">10.3</h1>
<h2 id="codeforces-round-746-div.-2">Codeforces Round #746 (Div. 2)</h2>
<h3 id="a">A</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		ll n,h;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;h);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">		ll t=<span class="built_in">floor</span>(<span class="number">1.0</span>*h/(a[<span class="number">1</span>]+a[<span class="number">2</span>]));</span><br><span class="line">		<span class="keyword">if</span>(t*(a[<span class="number">1</span>]+a[<span class="number">2</span>])==h)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,t&lt;&lt;<span class="number">1</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(t*(a[<span class="number">1</span>]+a[<span class="number">2</span>])+a[<span class="number">1</span>]&gt;=h)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,(t&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,(t&lt;&lt;<span class="number">1</span>)+<span class="number">2</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h3 id="b">B</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,x;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;x);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">			b[i]=a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">bool</span> f=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i+x&gt;n&amp;&amp;i-x&lt;<span class="number">1</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(a[i]!=b[i])&#123;</span><br><span class="line">					f=<span class="number">0</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">puts</span>(f?<span class="string">&quot;YES&quot;</span>:<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h3 id="c">C</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="keyword">int</span> t[N],sm,a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">	t[u]=a[u];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> v:G[u])&#123;</span><br><span class="line">		<span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">		t[u]^=<span class="built_in">dfs</span>(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> t[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> v:G[u])&#123;</span><br><span class="line">		<span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">find</span>(v,u);</span><br><span class="line">		<span class="keyword">if</span>(t[v]==sm&amp;&amp;!flag)&#123;</span><br><span class="line">			flag=<span class="number">1</span>;</span><br><span class="line">			G[u].<span class="built_in">erase</span>(<span class="built_in">find</span>(G[u].<span class="built_in">begin</span>(),G[u].<span class="built_in">end</span>(),v));</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,kk;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;kk);</span><br><span class="line">		sm=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">			sm^=a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">			<span class="keyword">int</span> x,y;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">			G[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">			G[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(sm==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(kk==<span class="number">2</span>)&#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">			<span class="built_in">find</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">				flag=<span class="number">0</span>;</span><br><span class="line">				<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">				<span class="built_in">find</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">				<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">					<span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			G[i].<span class="built_in">clear</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h1 id="section-1">10.4</h1>
<p>Lindström–Gessel–Viennot lemma，可以用来处理$  $上不相交路径计数等问题。</p>
<p><span class="math inline">\(\omega(P)\)</span> 表示 <span class="math inline">\(P\)</span> 这条路径上所有边的边权之积。（路径计数时，可以将边权都设为 <span class="math inline">\(1\)</span>）（事实上，边权可以为生成函数）</p>
<p><span class="math inline">\(e(u, v)\)</span> 表示 <span class="math inline">\(u\)</span> 到 <span class="math inline">\(v\)</span> 的$  $ <span class="math inline">\(P\)</span> 的 <span class="math inline">\(\omega(P)\)</span> 之和，即 <span class="math inline">\(e(u, v)=\sum\limits_{P:u\rightarrow v}\omega(P)\)</span>。</p>
<p>起点集合 <span class="math inline">\(A\)</span>，是有向无环图点集的一个子集，大小为 <span class="math inline">\(n\)</span>。</p>
<p>终点集合 <span class="math inline">\(B\)</span>，也是有向无环图点集的一个子集，大小也为 <span class="math inline">\(n\)</span>。</p>
<p>一组 <span class="math inline">\(A\rightarrow B\)</span> 的不相交路径 <span class="math inline">\(S\)</span>：<span class="math inline">\(S_i\)</span> 是一条从 <span class="math inline">\(A_i\)</span> 到 <span class="math inline">\(B_{\sigma(S)_i}\)</span> 的路径（<span class="math inline">\(\sigma(S)\)</span> 是一个排列），对于任何 <span class="math inline">\(i\ne j\)</span>，<span class="math inline">\(S_i\)</span> 和 <span class="math inline">\(S_j\)</span> 没有公共顶点。</p>
<p><span class="math inline">\(N(\sigma)\)</span> 表示排列 <span class="math inline">\(\sigma\)</span> 的逆序对个数。</p>
<p><span class="math display">\[
M = \begin{bmatrix}e(A_1,B_1)&amp;e(A_1,B_2)&amp;\cdots&amp;e(A_1,B_n)\\
e(A_2,B_1)&amp;e(A_2,B_2)&amp;\cdots&amp;e(A_2,B_n)\\
\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\
e(A_n,B_1)&amp;e(A_n,B_2)&amp;\cdots&amp;e(A_n,B_n)\end{bmatrix}
\]</span></p>
<p><span class="math display">\[
\det(M)=\sum\limits_{S:A\rightarrow B}(-1)^{N(\sigma(S))}\prod\limits_{i=1}^n \omega(S_i)
\]</span></p>
<p>其中 <span class="math inline">\(\sum\limits_{S:A\rightarrow B}\)</span> 表示满足上文要求的 <span class="math inline">\(A\rightarrow B\)</span> 的每一组不相交路径 <span class="math inline">\(S\)</span>。</p>
<p>路径计数时，<span class="math inline">\(\omega(S_i)=1\)</span>,故<span class="math inline">\(\prod\limits_{i=1}^n \omega(S_i)=1\)</span>。</p>
<p>例题题意：有一个 <span class="math inline">\(n\times n\)</span> 的棋盘，棋子只能向下向右走，有 <span class="math inline">\(m\)</span> 个棋子，一开始第 <span class="math inline">\(i\)</span> 个棋子放在 <span class="math inline">\((1, a_i)\)</span>，最终要到 <span class="math inline">\((n, b_i)\)</span>，路径要两两不相交，求方案数。</p>
<p>观察到如果路径不相交就一定是 <span class="math inline">\(a_i\)</span> 到 <span class="math inline">\(b_i\)</span>，因此 LGV 引理中一定有 <span class="math inline">\(\sigma(S)_i=i\)</span>，不需要考虑符号问题。边权设为 <span class="math inline">\(1\)</span>，直接套用引理即可。</p>
<p>从 <span class="math inline">\((1, a_i)\)</span> 到 <span class="math inline">\((n, b_j)\)</span> 的路径条数相当于从 <span class="math inline">\(n-1+b_j-a_i\)</span> 步中选 <span class="math inline">\(n-1\)</span> 步向下走，所以 <span class="math inline">\(e(A_i, B_j)=\binom{n-1+b_j-a_i}{n-1}\)</span>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">105</span>,N=<span class="number">2e6</span>+<span class="number">6</span>;</span><br><span class="line">ll fact[N],mt[M][M],a[M],b[M];</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exgcd</span>(b,a%b,x,y);</span><br><span class="line">    ll t=x;x=y;y=t-a/b*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a)</span></span>&#123;</span><br><span class="line">    ll x,y;</span><br><span class="line">    <span class="built_in">exgcd</span>(a,mod,x,y);</span><br><span class="line">    <span class="keyword">return</span> (x+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll n,ll m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fact[n]*<span class="built_in">inv</span>(fact[m])%mod*<span class="built_in">inv</span>(fact[n-m])%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    fact[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;++i)&#123;</span><br><span class="line">        fact[i]=(fact[i<span class="number">-1</span>]*i)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        ll n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;a[i],&amp;b[i]);<span class="comment">//(ai,1)-&gt;(bi,n)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i]&lt;=b[j])&#123;</span><br><span class="line">                    mt[i][j]=<span class="built_in">C</span>(n<span class="number">-1</span>+b[j]-a[i],n<span class="number">-1</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    mt[i][j]=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line">                <span class="keyword">while</span>(mt[j][i])&#123;</span><br><span class="line">                    ll t=mt[i][i]/mt[j][i];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;=m;++k)&#123;</span><br><span class="line">                        mt[i][k]=(mt[i][k]-t*mt[j][k]%mod+mod)%mod;</span><br><span class="line">                        <span class="built_in">swap</span>(mt[i][k],mt[j][k]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    ans=mod-ans;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans=ans*mt[i][i]%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,(ans+mod)%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="section-2">10.5</h1>
<p><a href="https://www.luogu.com.cn/problem/P5905">P5905【模板】Johnson 全源最短路</a></p>
<p>用于处理$  <span class="math inline">\(的多源最短路问题。套用斐波那契堆优化的Dijkstra时间复杂度为\)</span>O(V^2logV+VE)<span class="math inline">\(,套用二叉堆优化的Dijkstra时间复杂度\)</span>O(VElogE)$。</p>
<p>（稠密图<span class="math inline">\(V^2\approx E\)</span>，使用Floyd算法即可，无负边权直接做<span class="math inline">\(V\)</span>次Dijkstra。）</p>
<p>设虚拟结点，与其他点建边权为0的边，从虚拟结点跑spfa得<span class="math inline">\(h_i\)</span>，重建图赋值<span class="math inline">\((u, v)\)</span>边权<span class="math inline">\(w(u, v)\)</span>为<span class="math inline">\(w(u, v)+h_u-h_v\)</span>，这保证了最短路径不变而且所有权重均非负，跑n次Dijkstra求最短路，算法求得距离为<span class="math inline">\(dis(s, t)\)</span>，非不可达点的实际距离为<span class="math inline">\(dis(s, t)-(h_s-h_t)\)</span>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">6e3</span>+<span class="number">5</span>,N=<span class="number">3e3</span>+<span class="number">5</span>,inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> t,n,v;</span><br><span class="line">&#125;e[M+N];</span><br><span class="line"><span class="keyword">int</span> hd[N];</span><br><span class="line"><span class="keyword">int</span> cnt,n,m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    e[++cnt]=(Edge)&#123;t,hd[f],v&#125;;</span><br><span class="line">    hd[f]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> inq[N],vis[N];</span><br><span class="line"><span class="keyword">int</span> h[N],t[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">0</span>);<span class="comment">//虚拟结点定为0 </span></span><br><span class="line">    h[<span class="number">0</span>]=<span class="number">0</span>;inq[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        inq[u]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=e[i].n)&#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[i].t;</span><br><span class="line">            <span class="keyword">if</span>(h[v]&gt;h[u]+e[i].v)&#123;</span><br><span class="line">                h[v]=h[u]+e[i].v;</span><br><span class="line">                <span class="keyword">if</span>(!inq[v])&#123;</span><br><span class="line">                    ++t[v];</span><br><span class="line">                    <span class="keyword">if</span>(t[v]==n+<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//入队n+1次，有负环 </span></span><br><span class="line">                    q.<span class="built_in">push</span>(v);</span><br><span class="line">                    inq[v]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dis[N][N];</span><br><span class="line"><span class="keyword">bool</span> cho[N];</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line">priority_queue&lt;pii,vector&lt;pii&gt;,greater&lt;pii&gt; &gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dij</span><span class="params">(<span class="keyword">int</span> S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        dis[S][i]=inf;</span><br><span class="line">        cho[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dis[S][S]=<span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">pii</span>(<span class="number">0</span>,S));</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        pii t=q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">int</span> u=t.second;</span><br><span class="line">        <span class="keyword">if</span>(cho[u]) <span class="keyword">continue</span>;</span><br><span class="line">        cho[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=e[i].n)&#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[i].t;</span><br><span class="line">            <span class="keyword">if</span>(dis[S][v]&gt;dis[S][u]+e[i].v)&#123;</span><br><span class="line">                dis[S][v]=dis[S][u]+e[i].v;</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">pii</span>(dis[S][v],v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> a,b,v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;v);</span><br><span class="line">        <span class="built_in">build</span>(a,b,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        h[i]=inf;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">0</span>,i,<span class="number">0</span>);<span class="comment">//虚拟结点到其他点建边权为0的边 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">spfa</span>())&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;++u)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=e[i].n)&#123;</span><br><span class="line">            e[i].v+=h[u]-h[e[i].t];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="built_in">dij</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j) ans+=(<span class="keyword">long</span> <span class="keyword">long</span>)j*(dis[i][j]-(dis[i][j]==inf?<span class="number">0</span>:(h[i]-h[j])));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="section-3">10.7</h1>
<p>$  <span class="math inline">\(:给定域\)</span>F<span class="math inline">\(，\)</span>F<span class="math inline">\(上的向量空间\)</span>V$是一个集合，其上定义加法和数乘运算且这两个运算满足八个公理。</p>
<p>$  <span class="math inline">\(:对于向量空间中\)</span>V<span class="math inline">\(上\)</span>n<span class="math inline">\(个元素的向量组\)</span>(_1, , _n)$,若存在不全为<span class="math inline">\(0\)</span>的数<span class="math inline">\(a_i \in F\)</span>满足 <span class="math display">\[
a_{1}\mathbf{v}_{1}+a_{2}\mathbf {v}_{2}+\ldots +a_{n}\mathbf{v}_{n} = 0
\]</span></p>
<p>则称这<span class="math inline">\(n\)</span>个向量线性相关（linearly dependent），否则称为线性无关（linearly independent）。</p>
<p>$  <span class="math inline">\(:对于向量空间中 VV 上 nn 个元素的向量组\)</span>(_1, , _n)$，其线性组合（linear combination）是如下形式的向量</p>
<p><span class="math display">\[
a_{1}\mathbf{v}_{1} + a_{2}\mathbf {v} _{2}+\ldots +a_{n}\mathbf {v} _{n}
\]</span> ​​ 其中<span class="math inline">\(a_1, \ldots, a_n \in F\)</span></p>
<p>一组向量线性无关 <span class="math inline">\(\Leftrightarrow\)</span>没有向量可用有限个其他向量的线性组合所表示</p>
<p>$  $:对于向量空间中 <span class="math inline">\(V\)</span> 上 <span class="math inline">\(n\)</span> 个元素的向量组 <span class="math inline">\((\mathbf{v}_1, \ldots, \mathbf{v}_n)\)</span>，其所有线性组合所构成的集合称为 <span class="math inline">\((\mathbf{v}_1, \ldots, \mathbf{v}_n)\)</span>的张成（span），记为 <span class="math inline">\(\mathrm{span}(\mathbf{v}_1, \ldots, \mathbf{v}_n)\)</span></p>
<p>$  $:若向量空间 <span class="math inline">\(V\)</span> 中向量组 <span class="math inline">\(\mathfrak{B}\)</span> 既是线性无关的又可以张成 <span class="math inline">\(V\)</span>，则称其为<span class="math inline">\(V\)</span> 的基（basis）。</p>
<p><span class="math inline">\(\mathfrak{B}\)</span>中的元素称为基向量。如果基中元素个数有限，就称向量空间为有限维向量空间，将元素的个数称作向量空间的维数。</p>
<p>设 <span class="math inline">\(\mathfrak {B}\)</span> 是向量空间 <span class="math inline">\(V\)</span> 的基。则<span class="math inline">\(\mathfrak {B}\)</span>具有以下性质：</p>
<p>1.<span class="math inline">\(V\)</span> 是 <span class="math inline">\(\mathfrak {B}\)</span>的极小生成集，就是说只有<span class="math inline">\(\mathfrak {B}\)</span>能张成<span class="math inline">\(V\)</span>，而它的任何真子集都不张成全部的向量空间。</p>
<p>2.<span class="math inline">\(\mathfrak {B}\)</span> 是 <span class="math inline">\(V\)</span> 中线性无关向量的极大集合，就是说 <span class="math inline">\(\mathfrak {B}\)</span> 在<span class="math inline">\(V\)</span> 中是线性无关集合，而且<span class="math inline">\(V\)</span> 中没有其他线性无关集合包含它作为真子集。</p>
<p>3.<span class="math inline">\(V\)</span> 中所有的向量都可以按唯一的方式表达为<span class="math inline">\(\mathfrak {B}\)</span> 中向量的线性组合。</p>
<p>$  $</p>
<p>对于数 <span class="math inline">\(a_0, a_1, \ldots, a_n\)</span>，将 <span class="math inline">\(a_i\)</span>的二进制表示$ (b_{m}b_0)_2$​ 看作一个向量。向量组 <span class="math inline">\(\mathbf{a}_1, \ldots, \mathbf{a}_n\)</span>可以张成一个向量集合 <span class="math inline">\(\mathrm{span}(\mathbf{a}_1, \ldots, \mathbf{a}_n)\)</span>，加上我们的异或运算和乘法运算（显然满足 8 条公理），即可形成一个向量空间 <span class="math inline">\(V = (\{0, 1\}, \mathrm{span}(\mathbf{a}_1, \ldots, \mathbf{a}_n), \oplus, \cdot)\)</span></p>
<p>设集合<span class="math inline">\(S\)</span>中最大的数在二进制意义下有<span class="math inline">\(L\)</span>位，我们使用一个 <span class="math inline">\([0\dots L]\)</span>的数组<span class="math inline">\(a\)</span>来储存线性基。</p>
这种线性基的构造方法保证了一个特殊性质，对于每一个<span class="math inline">\(i\)</span>,<span class="math inline">\(a_i\)</span>有以下两种可能：
<p>（如果排成矩阵，形成一个下三角矩阵）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXL=<span class="number">60</span>;</span><br><span class="line">ll a[MAXL+<span class="number">1</span>];<span class="keyword">int</span> lbsiz;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(ll t)</span></span>&#123;<span class="comment">//高斯消元解出的对角矩阵的非零行构成的向量组 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=MAXL;j&gt;=<span class="number">0</span>;--j)&#123;<span class="comment">// 逆序枚举二进制位</span></span><br><span class="line">        <span class="keyword">if</span>(!((t&gt;&gt;j)&amp;<span class="number">1</span>)) <span class="keyword">continue</span>;<span class="comment">// 如果 t 的第 j 位为 0，则跳过</span></span><br><span class="line">        <span class="keyword">if</span>(a[j]) t^=a[j];</span><br><span class="line">        <span class="keyword">else</span>&#123;<span class="comment">// 找到可以插入 a[j] 的位置</span></span><br><span class="line">            <span class="comment">// 用 a[0...j - 1] 消去 t 的第 [0, j) 位上的 1</span></span><br><span class="line"><span class="comment">// 如果某一个a[k]=0也无须担心，因为这时候第k位不存在于线性基中，不需要保证t的第k位为 0	</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;j;++k) <span class="keyword">if</span>((t&gt;&gt;k)&amp;<span class="number">1</span>) t^=a[k];</span><br><span class="line">            <span class="comment">// 用 t 消去 a[j + 1...L] 的第 j 位上的 1</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>;k&lt;=MAXL;++k) <span class="keyword">if</span>((a[k]&gt;&gt;j)&amp;<span class="number">1</span>) a[k]^=t;</span><br><span class="line">                <span class="comment">// 插入到 a[j] 的位置上</span></span><br><span class="line">            a[j]=t;++lbsiz;</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">// 不要忘记，结束插入过程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最大异或和：将线性基中所有向量异或起来得到的向量所对应的数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">querymax</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=MAXL;++i) res^=a[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>集合任选大于1个元素异或出的第k大数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;ll&gt; v;</span><br><span class="line"><span class="keyword">bool</span> zero;<span class="keyword">int</span> n;<span class="comment">//zero: 是否能异或出0</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    lbsiz=<span class="number">0</span>;</span><br><span class="line">    v.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>&#123;</span><br><span class="line">    zero=(lbsiz!=n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=MAXL;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]) v.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(zero) --k;</span><br><span class="line">    <span class="keyword">if</span>(k&gt;=(<span class="number">1ll</span>&lt;&lt;v.<span class="built_in">size</span>())) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=MAXL;i&gt;=<span class="number">0</span>;--i) <span class="keyword">if</span>((k&gt;&gt;i)&amp;<span class="number">1</span>) res^=v[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> ttt=<span class="number">1</span>;ttt&lt;=T;++ttt)&#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);ll t;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;t);</span><br><span class="line">            <span class="built_in">insert</span>(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">prepare</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case #%d:\n&quot;</span>,ttt);</span><br><span class="line">        <span class="keyword">int</span> q;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q);</span><br><span class="line">        <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;t);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">query</span>(t));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="section-4">10.8</h1>
<h2 id="p4151-wc2011最大xor和路径">P4151 [WC2011]最大XOR和路径</h2>
<p>异或路径问题：转化成任意一条路径，和任意个圈的异或。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">200000</span>+<span class="number">5</span>,N=<span class="number">50000</span>+<span class="number">5</span>,MAXL=<span class="number">60</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> t,n;</span><br><span class="line">	ll v;</span><br><span class="line">&#125;e[M];</span><br><span class="line"><span class="keyword">int</span> hd[N],cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t,ll v)</span></span>&#123;</span><br><span class="line">	e[++cnt]=(Edge)&#123;t,hd[f],v&#125;;</span><br><span class="line">	hd[f]=cnt;</span><br><span class="line">&#125;</span><br><span class="line">ll a[MAXL+<span class="number">3</span>],dis[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(ll t)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=MAXL;j&gt;=<span class="number">0</span>;--j)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!((t&gt;&gt;j)&amp;<span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span>(a[j]) t^=a[j];</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;j;++k)&#123;</span><br><span class="line">				<span class="keyword">if</span>((t&gt;&gt;k)&amp;<span class="number">1</span>) t^=a[k];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>;k&lt;=MAXL;++k)&#123;</span><br><span class="line">				<span class="keyword">if</span>((a[k]&gt;&gt;j)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">					a[k]^=t;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			a[j]=t;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,ll now)</span></span>&#123;</span><br><span class="line">	dis[u]=now;vis[u]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=e[i].n)&#123;</span><br><span class="line">		<span class="keyword">int</span> v=e[i].t;</span><br><span class="line">		<span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">			<span class="built_in">dfs</span>(v,now^e[i].v);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">insert</span>(now^e[i].v^dis[v]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=MAXL;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">		<span class="keyword">if</span>((x^a[i])&gt;x)&#123;</span><br><span class="line">			x^=a[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">int</span> a,b;ll d;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>,&amp;a,&amp;b,&amp;d);</span><br><span class="line">		<span class="built_in">build</span>(a,b,d);</span><br><span class="line">		<span class="built_in">build</span>(b,a,d);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="built_in">query</span>(dis[n]));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="p4301-cqoi2013-新nim游戏">P4301 [CQOI2013] 新Nim游戏</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">40</span>],d[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;d[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(d+<span class="number">1</span>,d+n+<span class="number">1</span>,greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="keyword">int</span> t=d[i];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">31</span>;j&gt;=<span class="number">0</span>;--j)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!((t&gt;&gt;j)&amp;<span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(a[j]) t^=a[j];</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				a[j]=t;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!t) ans+=d[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="p3292-scoi2016幸运数字">P3292 [SCOI2016]幸运数字</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">20000</span>+<span class="number">5</span>,MAXL=<span class="number">61</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> t,n;</span><br><span class="line">&#125;e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> hd[N],cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">	e[++cnt]=(Edge)&#123;t,hd[f]&#125;;</span><br><span class="line">	hd[f]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Lbasis</span>&#123;</span><span class="comment">//Linear Basis </span></span><br><span class="line">	ll a[MAXL+<span class="number">1</span>];</span><br><span class="line">	<span class="built_in">Lbasis</span>()&#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);&#125;</span><br><span class="line">	<span class="built_in">Lbasis</span>(<span class="keyword">const</span> Lbasis&amp; b)&#123;<span class="built_in">memcpy</span>(a,b.a,<span class="keyword">sizeof</span> a);&#125; </span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(ll t)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=MAXL;j&gt;=<span class="number">0</span>;--j)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!((t&gt;&gt;j)&amp;<span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(a[j]) t^=a[j];</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;j;++k)&#123;</span><br><span class="line">					<span class="keyword">if</span>((t&gt;&gt;k)&amp;<span class="number">1</span>) t^=a[k];</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>;k&lt;=MAXL;++k)&#123;</span><br><span class="line">					<span class="keyword">if</span>((a[k]&gt;&gt;j)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">						a[k]^=t;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				a[j]=t;</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">const</span> Lbasis &amp;b)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=MAXL;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(b.a[i])&#123;</span><br><span class="line">				<span class="built_in">insert</span>(b.a[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">ll <span class="title">max</span><span class="params">()</span></span>&#123;</span><br><span class="line">		ll res=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=MAXL;++i)&#123;</span><br><span class="line">			res^=a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;b[<span class="number">20</span>][N];</span><br><span class="line"><span class="keyword">int</span> dep[N],anc[<span class="number">20</span>][N];</span><br><span class="line">ll val[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	dep[u]=dep[f]+<span class="number">1</span>;</span><br><span class="line">	anc[<span class="number">0</span>][u]=f;</span><br><span class="line">	b[<span class="number">0</span>][u].<span class="built_in">insert</span>(val[u]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;anc[i<span class="number">-1</span>][u];++i)&#123;</span><br><span class="line">		anc[i][u]=anc[i<span class="number">-1</span>][anc[i<span class="number">-1</span>][u]];</span><br><span class="line">		b[i][u]=b[i<span class="number">-1</span>][u];</span><br><span class="line">		b[i][u].<span class="built_in">merge</span>(b[i<span class="number">-1</span>][anc[i<span class="number">-1</span>][u]]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=e[i].n)&#123;</span><br><span class="line">		<span class="keyword">int</span> v=e[i].t;</span><br><span class="line">		<span class="keyword">if</span>(v==f) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(dep[x]&lt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">	<span class="keyword">int</span> dd=dep[x]-dep[y];</span><br><span class="line">	Lbasis res;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(dd&amp;(<span class="number">1</span>&lt;&lt;i))&#123;</span><br><span class="line">			res.<span class="built_in">merge</span>(b[i][x]);</span><br><span class="line">			x=anc[i][x];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(x==y)&#123;</span><br><span class="line">		res.<span class="built_in">insert</span>(val[x]);</span><br><span class="line">		<span class="keyword">return</span> res.<span class="built_in">max</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(anc[i][x]!=anc[i][y])&#123;</span><br><span class="line">			res.<span class="built_in">merge</span>(b[i][x]);res.<span class="built_in">merge</span>(b[i][y]);</span><br><span class="line">			x=anc[i][x];y=anc[i][y];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	res.<span class="built_in">insert</span>(val[x]);res.<span class="built_in">insert</span>(val[y]);res.<span class="built_in">insert</span>(val[anc[<span class="number">0</span>][x]]);</span><br><span class="line">	<span class="keyword">return</span> res.<span class="built_in">max</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> q;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;q);</span><br><span class="line">	<span class="keyword">int</span> a,b;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;val[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">		<span class="built_in">build</span>(a,b);<span class="built_in">build</span>(b,a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="keyword">int</span> x,y;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">ask</span>(x,y));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="section-5">10.9</h1>
<h2 id="codeforces-round-747-div.-2">Codeforces Round #747 (Div. 2)</h2>
<h3 id="a-1">A</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		ll n;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld %lld\n&quot;</span>,-(n<span class="number">-1</span>),n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="b-1">B</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		ll n,k;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;k,&amp;n);</span><br><span class="line">		ll ans=<span class="number">0</span>,pw=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(n)&#123;</span><br><span class="line">			<span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</span><br><span class="line">				ans=(ans+pw)%mod;</span><br><span class="line">			&#125;</span><br><span class="line">			pw=(pw*k)%mod;</span><br><span class="line">			n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c-1">C</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n;<span class="keyword">char</span> tar[<span class="number">5</span>];</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%s%s&quot;</span>,&amp;n,tar,s+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">char</span> c=tar[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">bool</span> eq=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(c!=s[i])&#123;</span><br><span class="line">				eq=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(eq)&#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="keyword">bool</span> f=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j+=i)&#123;</span><br><span class="line">				<span class="keyword">if</span>(s[j]!=c)&#123;</span><br><span class="line">					f=<span class="number">0</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(f)&#123;</span><br><span class="line">				ans=i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(ans!=<span class="number">-1</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;1\n%d\n&quot;</span>,ans);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;2\n%d %d\n&quot;</span>,n<span class="number">-1</span>,n);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="e1">E1</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>,p=mod;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">	    x=<span class="number">1</span>,y=<span class="number">0</span>;<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">exgcd</span>(b,a%b,x,y);</span><br><span class="line">	ll t=x;x=y;y=t-a/b*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a)</span></span>&#123;</span><br><span class="line">    ll x,y;</span><br><span class="line">    <span class="built_in">exgcd</span>(a,p,x,y);</span><br><span class="line">    <span class="keyword">return</span> (x+p)%p;</span><br><span class="line">&#125; </span><br><span class="line">ll iv;</span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">	ll t=<span class="built_in">f</span>(n<span class="number">-1</span>)*iv%mod;</span><br><span class="line">	<span class="keyword">return</span> t*t%mod*<span class="number">96ll</span>%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ll n;</span><br><span class="line">	iv=<span class="built_in">inv</span>(<span class="number">6</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	cout&lt;&lt;<span class="built_in">f</span>(n);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="e2">E2</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll p)</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    a%=mod;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p&amp;<span class="number">1</span>)&#123;</span><br><span class="line">            ans=(ans*a)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        a=(a*a)%mod;</span><br><span class="line">        p&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> color[<span class="number">10</span>][<span class="number">10</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>&#125;&#125;;</span><br><span class="line">map&lt;ll,<span class="keyword">int</span>&gt; label;</span><br><span class="line">ll dp[<span class="number">7</span>][(<span class="number">60</span>*<span class="number">10000</span>)+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> c[(<span class="number">60</span>*<span class="number">10000</span>)+<span class="number">5</span>];</span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt; &gt; G;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> cl)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(c[u]!=<span class="number">-1</span>&amp;&amp;c[u]!=cl)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(~dp[cl][u])&#123;</span><br><span class="line">		<span class="keyword">return</span> dp[cl][u];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(G[u].<span class="built_in">empty</span>())&#123;</span><br><span class="line">		<span class="keyword">return</span> dp[cl][u]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ll sum[<span class="number">2</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;G[u].<span class="built_in">size</span>();++j)&#123;</span><br><span class="line">			sum[j]=(sum[j]+<span class="built_in">dfs</span>(G[u][j],color[cl][i]))%mod;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(G[u].<span class="built_in">size</span>()==<span class="number">1</span>)&#123;</span><br><span class="line">		sum[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dp[cl][u]=(sum[<span class="number">0</span>]*sum[<span class="number">1</span>])%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    map&lt;string,ll&gt;mp;</span><br><span class="line">    mp[<span class="string">&quot;white&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">    mp[<span class="string">&quot;blue&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">    mp[<span class="string">&quot;red&quot;</span>] = <span class="number">2</span>;</span><br><span class="line">    mp[<span class="string">&quot;yellow&quot;</span>] = <span class="number">3</span>;</span><br><span class="line">    mp[<span class="string">&quot;green&quot;</span>] = <span class="number">4</span>;</span><br><span class="line">    mp[<span class="string">&quot;orange&quot;</span>] = <span class="number">5</span>;</span><br><span class="line">    ll k,n;cin&gt;&gt;k&gt;&gt;n;</span><br><span class="line">    map&lt;ll,<span class="keyword">int</span>&gt; ar;</span><br><span class="line">    ll totno=(<span class="number">1ll</span>&lt;&lt;k)<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> lab=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">    	ll x;string s;</span><br><span class="line">    	cin&gt;&gt;x&gt;&gt;s;</span><br><span class="line">    	ar[x]=mp[s];</span><br><span class="line">    	ll cur=x;</span><br><span class="line">    	<span class="keyword">while</span>(cur&gt;=<span class="number">1</span>&amp;&amp;!label.<span class="built_in">count</span>(cur))&#123;</span><br><span class="line">    		label[cur]=++lab;</span><br><span class="line">    		--totno;</span><br><span class="line">    		cur/=<span class="number">2</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">    <span class="built_in">memset</span>(c,<span class="number">-1</span>,<span class="keyword">sizeof</span> c);</span><br><span class="line">    G.<span class="built_in">assign</span>(lab+<span class="number">5</span>,vector&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:label)&#123;</span><br><span class="line">    	<span class="keyword">if</span>(ar.<span class="built_in">count</span>(x.first))&#123;</span><br><span class="line">    		c[x.second]=ar[x.first];</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">if</span>(label.<span class="built_in">count</span>(x.first&lt;&lt;<span class="number">1</span>))&#123;</span><br><span class="line">    		G[x.second].<span class="built_in">push_back</span>(label[x.first&lt;&lt;<span class="number">1</span>]);</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">if</span>(label.<span class="built_in">count</span>(x.first&lt;&lt;<span class="number">1</span>|<span class="number">1</span>))&#123;</span><br><span class="line">    		G[x.second].<span class="built_in">push_back</span>(label[x.first&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;++i)</span><br><span class="line">    	ans=(ans+<span class="built_in">dfs</span>(label[<span class="number">1</span>],i))%mod;</span><br><span class="line">    ans=(ans*<span class="built_in">qpow</span>(<span class="number">4</span>,totno))%mod;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>数位dp学习记录</title>
    <url>/20210413/%E6%95%B0%E4%BD%8Ddp%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>This blog is a derivative of <a href="https://blog.csdn.net/wust_zzwh/article/details/52100392">数位dp总结 之 从入门到模板</a> by wust_wenhao (csdn) <a href="https://blog.csdn.net/liangzhaoyang1/article/details/70185872used">#51 D. Beautiful numbers （数位dp+离散化）</a>under CC 4.0 BY-SA, example codes are modified, some contents are added</p>
<h2 id="引入">引入</h2>
<p>数位dp是一种计数用的dp，一般就是要统计一个区间[le,ri]内满足一些条件数的个数。所谓数位dp，字面意思就是在数位上进行dp咯。数位还算是比较好听的名字，数位的含义：一个数有个位、十位、百位、千位......数的每一位就是数位啦！</p>
<p>之所以要引入数位的概念完全就是为了dp。数位dp的实质就是换一种暴力枚举的方式，使得新的枚举方式满足dp的性质，然后记忆化就可以了。</p>
<p>两种不同的枚举：对于一个求区间[le,ri]满足条件数的个数，最简单的暴力如下： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=le;i&lt;=ri;i++)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">right</span>(i)) ans++;</span><br></pre></td></tr></table></figure></p>
<p>然而这样枚举不方便记忆化，或者说根本无状态可言。 新的枚举：控制上界枚举，从最高位开始往下枚举，例如：ri=213，那么我们从百位开始枚举：百位可能的情况有0,1,2(觉得这里枚举0有问题的继续看)</p>
<p>然后每一位枚举都不能让枚举的这个数超过上界213（下界就是0或者1，这个次要），当百位枚举了1，那么十位枚举就是从0到9，因为百位1已经比上界2小了，后面数位枚举什么都不可能超过上界。所以问题就在于：当高位枚举刚好达到上界是，那么紧接着的一位枚举就有上界限制了。具体的这里如果百位枚举了2，那么十位的枚举情况就是0到1，如果前两位枚举了21，最后一位之是0到3(这一点正好对于代码模板里的一个变量limit 专门用来判断枚举范围)。最后一个问题：最高位枚举0：百位枚举0，相当于此时我枚举的这个数最多是两位数，如果十位继续枚举0，那么我枚举的就是以为数咯，因为我们要枚举的是小于等于ri的所以数，当然不能少了位数比ri小的咯！(这样枚举是为了无遗漏的枚举，不过可能会带来一个问题，就是前导零的问题，模板里用lead变量表示，不过这个不是每个题目都是会有影响的，可能前导零不会影响我们计数，具体要看题目)</p>
<p>由于这种新的枚举只控制了上界所以我们的Main函数总是这样: <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> le,ri;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;le,&amp;ri))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">solve</span>(ri)-<span class="built_in">solve</span>(le<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 统计[1,ri]数量和[1,le-1]，然后相减就是区间[le,ri]的数量了，这里我写的下界是1，其实0也行，反正相减后就没了，注意题目中le的范围都是大于等于1的(不然le=0,再减一就G_G了) 在讲例题之前先讲个基本的动态模板(先看后面的例题也行)：dp思想，枚举到当前位置pos，状态为state(这个就是根据题目来的，可能很多，毕竟dp千变万化)的数量(既然是计数,dp值显然是保存满足条件数的个数) <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">20</span>];</span><br><span class="line">ll dp[<span class="number">20</span>][state];<span class="comment">//不同题目状态不同</span></span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="comment">/*state变量*/</span>,<span class="keyword">bool</span> lead<span class="comment">/*前导零*/</span>,<span class="keyword">bool</span> limit<span class="comment">/*数位上界变量*/</span>)</span><span class="comment">//不是每个题都要判断前导零</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//递归边界，既然是按位枚举，最低位是0，那么pos==-1说明这个数我枚举完了</span></span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">/*这里一般返回1，表示你枚举的这个数是合法的，那么这里就需要你在枚举时必须每一位都要满足题目条件，也就是说当前枚举到pos位，一定要保证前面已经枚举的数位是合法的。不过具体题目不同或者写法不同的话不一定要返回1 */</span></span><br><span class="line">    <span class="comment">//第二个就是记忆化(在此前可能不同题目还能有一些剪枝)</span></span><br><span class="line">    <span class="keyword">if</span>(!limit &amp;&amp; !lead &amp;&amp; dp[pos][state]!=<span class="number">-1</span>) <span class="keyword">return</span> dp[pos][state];</span><br><span class="line">    <span class="comment">/*常规写法都是在没有限制的条件记忆化，这里与下面记录状态是对应，具体为什么是有条件的记忆化后面会讲*/</span></span><br><span class="line">    <span class="keyword">int</span> up=limit?a[pos]:<span class="number">9</span>;<span class="comment">//根据limit判断枚举的上界up;这个的例子前面用213讲过了</span></span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//开始计数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=up;i++)<span class="comment">//枚举，然后把不同情况的个数加到ans就可以了</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>() ...</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>()...</span><br><span class="line">        ans+=<span class="built_in">dfs</span>(pos<span class="number">-1</span>,<span class="comment">/*状态转移*/</span>,lead &amp;&amp; i==<span class="number">0</span>,limit &amp;&amp; i==a[pos]) <span class="comment">//最后两个变量传参都是这样写的</span></span><br><span class="line">        <span class="comment">/*这里还算比较灵活，不过做几个题就觉得这里也是套路了</span></span><br><span class="line"><span class="comment">        大概就是说，我当前数位枚举的数是i，然后根据题目的约束条件分类讨论</span></span><br><span class="line"><span class="comment">        去计算不同情况下的个数，还有要根据state变量来保证i的合法性，比如题目</span></span><br><span class="line"><span class="comment">        要求数位上不能有62连续出现,那么就是state就是要保存前一位pre,然后分类，</span></span><br><span class="line"><span class="comment">        前一位如果是6那么这意味就不能是2，这里一定要保存枚举的这个数是合法*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算完，记录状态</span></span><br><span class="line">    <span class="keyword">if</span>(!limit &amp;&amp; !lead) dp[pos][state]=ans;</span><br><span class="line">    <span class="comment">/*这里对应上面的记忆化，在一定条件下时记录，保证一致性，当然如果约束条件不需要考虑lead，这里就是lead就完全不用考虑了*/</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)<span class="comment">//把数位都分解出来</span></span><br><span class="line">    &#123;</span><br><span class="line">        a[pos++]=x%<span class="number">10</span>;<span class="comment">//个人老是喜欢编号为[0,pos),看不惯的就按自己习惯来，反正注意数位边界就行</span></span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dfs</span>(pos<span class="number">-1</span><span class="comment">/*从最高位开始枚举*/</span>,<span class="comment">/*一系列状态 */</span>,<span class="literal">true</span>,<span class="literal">true</span>);<span class="comment">//刚开始最高位都是有限制并且有前导零的，显然比最高位还要高的一位视为0嘛</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll le,ri;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;le,&amp;ri))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//初始化dp数组为-1,这里还有更加优美的优化,后面讲</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">solve</span>(ri)-<span class="built_in">solve</span>(le<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 相信读者还对这个有不少疑问，笔者认为有必要讲一下记忆化为什么是if(!limit)才行，大致就是说有无limit会出现状态冲突，举例： 约束：数位上不能出现连续的两个1(11、112、211都是不合法的)</p>
<p>假设就是[1,210]这个区间的个数</p>
<p>状态:dp[pos][pre]:当前枚举到pos位，前面一位枚举的是pre(更加前面的位已经合法了)，的个数(我的pos从0开始)</p>
<p>先看错误的方法计数，就是不判limit就是直接记忆化</p>
<p>那么假设我们第一次枚举了百位是0，显然后面的枚举limit=false，也就是数位上0到9的枚举，然后当我十位枚举了1，此时考虑dp[0][1],就是枚举到个位，前一位是1的个数，显然dp[0][1]=9;(个位只有是1的时候是不满足的)，这个状态记录下来，继续dfs，一直到百位枚举了2，十位枚举了1，显然此时递归到了pos=0,pre=1的层，而dp[0][1]的状态已经有了即dp[pos][pre]!=-1；此时程序直接return dp[0][1]了，然而显然是错的，因为此时是有limit的个位只能枚举0，根本没有9个数，这就是状态冲突了。有lead的时候可能出现冲突，这只是两个最基本的不同的题目可能还要加限制，反正宗旨都是让dp状态唯一</p>
<p>对于这个错误说两点：一是limit为true的数并不多，一个个枚举不会很浪费时间，所以我们记录下! limit的状态解决了不少子问题重叠。第二，有人可能想到把dp状态改一下dp[pos][state][limit]就是分别记录不同limit下的个数，这种方法一般是对的，关于这个具体会讲，下面有题bzoj3209会用到这个。</p>
<p>数位的部分就是这些，然后就是难点，dp部分，dp大牛的艺术，弱鸡只能看看+...+</p>
<p>既然从高位往低位枚举，那么状态一般都是与前面已经枚举的数位有关并且通常是根据约束条件当前枚举的这一位能使得状态完整(比如一个状态涉及到连续k位，那么就保存前k-1的状态，当前枚举的第k个是个恰好凑成成一个完整的状态，不过像那种状态是数位的和就直接保存前缀和为状态了)，不过必然有一位最简单的一个状态dp[pos]当前枚举到了pos位。dp部分就要开始讲例题了，不过会介绍几种常用防tle的优化。</p>
<div>
<h2>
<span style="font-size:24px"><a target="_blank" href="http://acm.hdu.edu.cn/showproblem.php?pid=2089" rel="noopener noreferrer">HDU 2089</a> 不要62</span>
</div>
</h2>
<br>
<div>
<p><span style="font-size:18px">入门题。就是数位上不能有4也不能有连续的62，没有4的话在枚举的时候判断一下，不枚举4就可以保证状态合法了，所以这个约束没有记忆化的必要，而对于62的话，涉及到两位，当前一位是6或者不是6这两种不同情况我计数是不相同的，所以要用状态来记录不同的方案数。</span></p>
</div>
<div>
<p><span style="font-size:18px">dp[pos][sta]表示当前第pos位，前一位是否是6的状态，这里sta只需要去0和1两种状态就可以了，不是6的情况可视为同种，不会影响计数。</span></p>
</div>
<div>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">20</span>],dp[<span class="number">2</span>][<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> pre,<span class="keyword">int</span> sta,<span class="keyword">bool</span> lim)</span></span>&#123;</span><br><span class="line"><span class="comment">//pos:position [0,n)</span></span><br><span class="line"><span class="comment">//pre:previous selected number</span></span><br><span class="line"><span class="comment">//sta:status, it means pre==6 in this problem</span></span><br><span class="line"><span class="comment">//lim:limitation, it means if the i-th numbers before pos are all a[i] or not</span></span><br><span class="line">	<span class="keyword">if</span>(pos==<span class="number">-1</span>)&#123;<span class="comment">//the number 0</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!lim&amp;&amp;dp[sta][pos]!=<span class="number">-1</span>)&#123;<span class="comment">//memorization</span></span><br><span class="line">		<span class="keyword">return</span> dp[sta][pos];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> rg=lim?a[pos]:<span class="number">9</span>,tmp=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=rg;++i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(pre==<span class="number">6</span>&amp;&amp;i==<span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span>(i==<span class="number">4</span>) <span class="keyword">continue</span>;</span><br><span class="line">		tmp+=<span class="built_in">dfs</span>(pos<span class="number">-1</span>,i,i==<span class="number">6</span>,lim&amp;&amp;i==a[pos]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!lim) dp[sta][pos]=tmp;</span><br><span class="line">	<span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(x)&#123;</span><br><span class="line">		a[pos++]=x%<span class="number">10</span>;</span><br><span class="line">		x/=<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">dfs</span>(pos<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> l,r;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;l,&amp;r)&amp;&amp;l+r)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">solve</span>(r)-<span class="built_in">solve</span>(l<span class="number">-1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br> 入门就不多讲了，开始讲常用优化吧！</p>
</div>
<span style="font-size:18px">第一:memset(dp,-1,sizeof dp);放在多组数据外面。</span>
<div>
<p><span style="font-size:18px">这一点是一个数位特点，使用的条件是：约束条件是每个数自身的属性，而与输入无关。</span></p>
</div>
<div>
<p><span style="font-size:18px">具体的：上一题不要62和4，这个约束对每一个数都是确定的，就是说任意一个数满不满足这个约束都是确定，比如444这个数，它不满足约束条件，不管你输入的区间是多少你都无法改变这个数不满足约束这个事实，这就是数自身的属性（我们每组数据只是在区间计数而已，只能说你输入的区间不包含444的话，我们就不把它统计在内，而无法改变任何事实）。</span></p>
</div>
<div>
<p><span style="font-size:18px">由此，我们保存的状态就可以一直用(注意还有要limit，不同区间是会影响数位在有限制条件下的上限的)</span></p>
</div>
<div>
<p><span style="font-size:18px">这点优化就不给具体题目了，这个还有进一步的扩展。不过说几个我遇到的简单的约束：</span></p>
</div>
<div>
<p><span style="font-size:18px">1.求数位和是10的倍数的个数,这里简化为数位sum%10这个状态，即dp[pos][sum]这里10 是与多组无关的，所以可以memset优化，不过注意如果题目的模是输入的话那就不能这样了。</span></p>
</div>
<div>
<p><span style="font-size:18px">2.求二进制1的数量与0的数量相等的个数，这个也是数自身的属性。</span></p>
</div>
<div>
<p><span style="font-size:18px">3.。。。。。</span></p>
</div>
<div>
<p><span style="font-size:18px">还是做题积累吧。搞懂思想！</span></p>
</div>
<div>
<p><span style="font-size:18px">下面介绍的方法就是要行memset优化，把不满足前提的通过修改，然后优化。</span></p>
</div>
<div>
<p><span style="font-size:18px">介绍之前,先说一种较为笨拙的修改，那就是增加状态，前面讲limit的地方说增加一维dp[pos][state][limit]，能把不同情况下状态分别记录(不过这个不能memset放外面)。基于这个思想，我们考虑：约束为数位是p的倍数的个数，其中p数输入的，这和上面sum%10类似，但是dp[pos][sum]显然已经不行了，每次p可能都不一样，为了强行把memset提到外面加状态dp[pos][sum][p]，对于每个不同p分别保存对应的状态。这里前提就比较简单了，你dp数组必须合法，p太大就G_G了。所以对于与输入有关的约束都可以强行增加状态(这并不代表能ac，如果题目数据少的话就随便你乱搞了)</span></p>
<span style="font-size:24px">
<h2>
例题：<a target="_blank" href="http://acm.hdu.edu.cn/showproblem.php?pid=4734" rel="noopener noreferrer">HDU 4734</a></span>
</h2>
</div>
<div>
<p><span style="font-size:18px">题目给了个f(x)的定义：<span style="font-family:&#39;Times New Roman&#39;; font-size:14px">F(x) = A</span><sub style="font-family:'Times New Roman'">n</sub><span style="font-family:&#39;Times New Roman&#39;; font-size:14px"> * 2</span><sup style="font-family:'Times New Roman'">n-1</sup><span style="font-family:&#39;Times New Roman&#39;; font-size:14px"> + A</span><sub style="font-family:'Times New Roman'">n-1</sub><span style="font-family:&#39;Times New Roman&#39;; font-size:14px"> * 2</span><sup style="font-family:'Times New Roman'">n-2</sup><span style="font-family:&#39;Times New Roman&#39;; font-size:14px"> + ... + A</span><sub style="font-family:'Times New Roman'">2</sub><span style="font-family:&#39;Times New Roman&#39;; font-size:14px"> * 2 + A</span><sub style="font-family:'Times New Roman'">1</sub><span style="font-family:&#39;Times New Roman&#39;; font-size:14px"> * 1</span>，Ai是十进制数位，然后给出a,b求区间[0,b]内满足f(i)&lt;=f(a)的i的个数。</span></p>
</div>
<div>
<p><span style="font-size:18px">常规想：这个f(x)计算就和数位计算是一样的，就是加了权值，所以dp[pos][sum]，这状态是基本的。a是题目给定的，f(a)是变化的不过f(a)最大好像是4600的样子。如果要memset优化就要加一维存f(a)的不同取值，那就是dp[10][4600][4600]，这显然不合法。</span></p>
</div>
<div>
<p><span style="font-size:18px">这个时候就要用减法了，dp[pos][sum]，sum不是存当前枚举的数的前缀和(加权的)，而是枚举到当前pos位，后面还需要凑sum的权值和的个数，</span></p>
</div>
<div>
<p><span style="font-size:18px">也就是说初始的是时候sum是f(a),枚举一位就减去这一位在计算f(i)的权值，那么最后枚举完所有位 sum&gt;=0时就是满足的，后面的位数凑足sum位就可以了。</span></p>
</div>
<div>
<p><span style="font-size:18px">仔细想想这个状态是与f(a)无关的(新手似乎很难理解)，一个状态只有在sum&gt;=0时才满足，如果我们按常规的思想求f(i)的话，那么最后sum&gt;=f(a)才是满足的条件。</span></p>
</div>
<div>
<p><br></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">11</span>][N];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">20</span>],fa;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>,pw=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(x)&#123;</span><br><span class="line">		ans+=x%<span class="number">10</span>*pw;</span><br><span class="line">		pw&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">		x/=<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> sum,<span class="keyword">bool</span> lim)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pos==<span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> sum&lt;=fa;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(sum&gt;fa)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!lim&amp;&amp;dp[pos][fa-sum]!=<span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> dp[pos][fa-sum];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> rg=lim?a[pos]:<span class="number">9</span>,ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=rg;++i)&#123;</span><br><span class="line">		ans+=<span class="built_in">dfs</span>(pos<span class="number">-1</span>,sum+i*(<span class="number">1</span>&lt;&lt;pos),lim&amp;&amp;i==a[pos]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!lim)&#123;</span><br><span class="line">		dp[pos][fa-sum]=ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(x)&#123;</span><br><span class="line">		a[pos++]=x%<span class="number">10</span>;</span><br><span class="line">		x/=<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">dfs</span>(pos<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">	<span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;++i)&#123;</span><br><span class="line">		<span class="keyword">int</span> aa,bb;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;aa,&amp;bb);</span><br><span class="line">		fa=<span class="built_in">f</span>(aa);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Case #%d: %d\n&quot;</span>,i,<span class="built_in">solve</span>(bb));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</div>
<div>
<p><br></p>
</div>
<div>
<h2>
例题 <strong><a target="_blank" href="http://poj.org/problem?id=3252" rel="noopener noreferrer">POJ 3252</a></strong>
</div>
</h2>
<br>
<div>
<p><span style="font-size:18px">这题的约束就是一个数的二进制中0的数量要不能少于1的数量，通过上一题，这题状态就很简单了，dp[pos][num],到当前数位pos,0的数量减去1的数量不少于num的方案数，一个简单的问题，中间某个pos位上num可能为负数(这不一定是非法的，因为我还没枚举完嘛，只要最终的num&gt;=0才能判合法，中途某个pos就不一定了)，这里比较好处理，Hash嘛，最小就-32吧(好像),直接加上32，把32当0用。这题主要是要想讲一下lead的用法，显然我要统计0的数量，前导零是有影响的。至于!lead&amp;&amp;!limit才能dp，都是类似的，自己慢慢体会吧。</span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">&quot;/STACK:10240000,10240000&quot;</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">33</span>][<span class="number">65</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">33</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> dlt,<span class="keyword">bool</span> lead,<span class="keyword">bool</span> lim)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pos==<span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> dlt&gt;=<span class="number">32</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!lim&amp;&amp;!lead&amp;&amp;dp[pos][dlt]!=<span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> dp[pos][dlt];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> rg=lim?a[pos]:<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=rg;++i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(lead&amp;&amp;i==<span class="number">0</span>)&#123;</span><br><span class="line">			ans+=<span class="built_in">dfs</span>(pos<span class="number">-1</span>,dlt,lead,lim&amp;&amp;i==a[pos]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			ans+=<span class="built_in">dfs</span>(pos<span class="number">-1</span>,dlt+(i==<span class="number">0</span>?<span class="number">1</span>:<span class="number">-1</span>),lead&amp;&amp;i==<span class="number">0</span>,lim&amp;&amp;i==a[pos]);</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!lim&amp;&amp;!lead)&#123;</span><br><span class="line">		dp[pos][dlt]=ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">	<span class="keyword">while</span>(x)&#123;</span><br><span class="line">		a[i++]=x&amp;<span class="number">1</span>;</span><br><span class="line">		x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">dfs</span>(i<span class="number">-1</span>,<span class="number">32</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,b;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">solve</span>(b)-<span class="built_in">solve</span>(a<span class="number">-1</span>));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="bit-sequence2020-icpc济南站-l"><a href="https://ac.nowcoder.com/acm/contest/10662/L">Bit Sequence</a>（2020 ICPC济南站 L）</h2>
<p>Let <math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math> denote the number of 1s in the binary representation of <math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math>x.</p>
<p>Now MianKing has a sequence <math><semantics><mrow><msub><mi>a</mi><mrow><mn>0...</mn><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">a_{0...m-1}</annotation></semantics></math>a0...m−1​ and he wants to know the number of integer <math><semantics><mrow><mi>x</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>L</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">x </annotation></semantics></math>x∈[0,L] satisfies that: <math><semantics><mrow><mi mathvariant="normal">∀</mi><mi>i</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>i</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mn>2</mn><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">i, f(x+i)<sub>mod</sub>2=a_i</annotation></semantics></math>∀i∈[0,m−1],f(x+i) mod 2=ai​</p>
<p>You need to help him calculate the answer.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],dig[N],cnt,m,f[<span class="number">550</span>];</span><br><span class="line">ll dp[<span class="number">65</span>][<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>],L;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">cal</span><span class="params">(<span class="keyword">int</span> sum,<span class="keyword">int</span> one,<span class="keyword">int</span> lim)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> s=lim?L%<span class="number">128</span>:<span class="number">127</span>;</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=s;++i)&#123;</span><br><span class="line">		<span class="keyword">bool</span> ff=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m&amp;&amp;ff;++j)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i+j&lt;<span class="number">128</span>)&#123;</span><br><span class="line">				ff=(f[i+j]^sum)==a[j+<span class="number">1</span>];</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				ff=(f[i+j]^one^sum==a[j+<span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ans+=ff;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> sum,<span class="keyword">int</span> one,<span class="keyword">int</span> lim)</span></span>&#123;</span><br><span class="line">	ll &amp;x=dp[pos][sum][one][lim];</span><br><span class="line">	<span class="keyword">if</span>(x!=<span class="number">-1</span>) <span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">if</span>(pos&lt;=<span class="number">6</span>)&#123;</span><br><span class="line">		x=<span class="built_in">cal</span>(sum,one,lim);</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> rg=lim?dig[pos]:<span class="number">1</span>;</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=rg;++i)&#123;</span><br><span class="line">		<span class="keyword">int</span> no=one;</span><br><span class="line">		<span class="keyword">if</span>(i)&#123;</span><br><span class="line">			no^=<span class="number">1</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			no=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ans+=<span class="built_in">dfs</span>(pos<span class="number">-1</span>,sum^i,no,lim&amp;&amp;i==rg);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x=ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">	<span class="built_in">memset</span>(dig,<span class="number">0</span>,<span class="keyword">sizeof</span> dig);</span><br><span class="line">	cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">63</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">		dig[i]=(x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(dig[i])&#123;</span><br><span class="line">			len=<span class="built_in">max</span>(len,i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">dfs</span>(len,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">512</span>;++i)&#123;</span><br><span class="line">		f[i]=f[i&gt;&gt;<span class="number">1</span>]^(i&amp;<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>,&amp;m,&amp;L);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">solve</span>(L));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="hdu355-bomb"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3555">hdu355 Bomb</a></h2>
<p>若从反面做，先找没有49的数，和<em>不要62</em>基本相同。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll dp[<span class="number">2</span>][<span class="number">100</span>];</span><br><span class="line">ll a[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> pre,<span class="keyword">bool</span> lim)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pos==<span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1ll</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!lim&amp;&amp;dp[pre==<span class="number">4</span>][pos]!=<span class="number">-1</span>) <span class="keyword">return</span> dp[pre==<span class="number">4</span>][pos];</span><br><span class="line">	<span class="keyword">int</span> rg=lim?a[pos]:<span class="number">9</span>;</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=rg;++i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(pre==<span class="number">4</span>&amp;&amp;i==<span class="number">9</span>)&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ans+=<span class="built_in">dfs</span>(pos<span class="number">-1</span>,i,lim&amp;&amp;i==a[pos]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!lim)&#123;</span><br><span class="line">		dp[pre==<span class="number">4</span>][pos]=ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">		ll len=<span class="number">0</span>;</span><br><span class="line">		ll n;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">		ll tmp=n;</span><br><span class="line">		<span class="keyword">while</span>(n)&#123;</span><br><span class="line">			a[len++]=n%<span class="number">10</span>;</span><br><span class="line">			n/=<span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,tmp+<span class="number">1</span>-<span class="built_in">dfs</span>(len<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure> 从正面做 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll dp[<span class="number">3</span>][<span class="number">100</span>];</span><br><span class="line">ll a[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> sta,<span class="keyword">bool</span> lim)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pos==<span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> sta==<span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!lim&amp;&amp;dp[sta][pos]!=<span class="number">-1</span>) <span class="keyword">return</span> dp[sta][pos];</span><br><span class="line">	<span class="keyword">int</span> rg=lim?a[pos]:<span class="number">9</span>;</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=rg;++i)&#123;</span><br><span class="line">		<span class="keyword">int</span> ns=sta;</span><br><span class="line">		<span class="keyword">if</span>(ns&lt;<span class="number">2</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i==<span class="number">4</span>)&#123;</span><br><span class="line">				ns=<span class="number">1</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">9</span>&amp;&amp;ns==<span class="number">1</span>)&#123;</span><br><span class="line">				ns=<span class="number">2</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				ns=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ans+=<span class="built_in">dfs</span>(pos<span class="number">-1</span>,ns,lim&amp;&amp;i==a[pos]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!lim)&#123;</span><br><span class="line">		dp[sta][pos]=ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">		ll len=<span class="number">0</span>;</span><br><span class="line">		ll n;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">		<span class="keyword">while</span>(n)&#123;</span><br><span class="line">			a[len++]=n%<span class="number">10</span>;</span><br><span class="line">			n/=<span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">dfs</span>(len<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></p>
<h2 id="hdu3652-b-number"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3652">hdu3652 B-number</a></h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">4</span>][<span class="number">30</span>][<span class="number">50</span>],a[<span class="number">50</span>];<span class="comment">//sta==1 前方为1 sta==2 已有 13</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> sta,<span class="keyword">int</span> m,<span class="keyword">bool</span> lim)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pos==<span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> sta==<span class="number">2</span>&amp;&amp;m==<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!lim&amp;&amp;dp[sta][m][pos]!=<span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> dp[sta][m][pos];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> rg=lim?a[pos]:<span class="number">9</span>,ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=rg;++i)&#123;</span><br><span class="line">		<span class="keyword">int</span> ns=sta;</span><br><span class="line">		<span class="keyword">if</span>(sta==<span class="number">0</span>&amp;&amp;i==<span class="number">1</span>)&#123;</span><br><span class="line">			ns=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(sta==<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i!=<span class="number">1</span>)</span><br><span class="line">				ns=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(i==<span class="number">3</span>)&#123;</span><br><span class="line">				ns=<span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ans+=<span class="built_in">dfs</span>(pos<span class="number">-1</span>,ns,(m*<span class="number">10</span>+i)%<span class="number">13</span>,lim&amp;&amp;i==a[pos]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!lim)&#123;</span><br><span class="line">		dp[sta][m][pos]=ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n))&#123;</span><br><span class="line">		<span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">		<span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(n)&#123;</span><br><span class="line">			a[len++]=n%<span class="number">10</span>;</span><br><span class="line">			n/=<span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">dfs</span>(len<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果一个数能整除它的所有的非零数位，那么相当于它能整除个位数的最小公倍数。因此记忆化搜索中的参数除了len(当前位)和flag（是否达到上界），有一个pre_lcm表示前面的数的最小公倍数，判断这个数是否是Beautiful Numbers，还要有一个参数表示前面数，但是这个数太大，需要缩小它的范围。 可以发现所有个位数的最小公倍数是2520，假设当前的Beautiful Numbers是x， 那么 x % lcm{ dig[ i ] } = 0, 又 2520%lcm{ dig[ i ] } = 0。 那么x%2520%lcm{ dig[i] } = 0，x范围由9*10^18变为2520。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">20</span>];</span><br><span class="line">ll dp[<span class="number">20</span>][<span class="number">50</span>][<span class="number">2525</span>];</span><br><span class="line"><span class="keyword">int</span> mp[<span class="number">2525</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">lcm</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a/__gcd(a,b)*b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dp[i][j][k] 表示长度为i的，对2520取模为k的，最小公倍数序数为j的数的个数.</span></span><br><span class="line"><span class="comment">//1~9最小公倍数只有48个，预处理出来。（mp数组） </span></span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> lm,<span class="keyword">int</span> num,<span class="keyword">bool</span> lim)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pos==<span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> num%lm==<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!lim&amp;&amp;dp[pos][mp[lm]][num]!=<span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> dp[pos][mp[lm]][num];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> rg=lim?a[pos]:<span class="number">9</span>;</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=rg;++i)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> now=(num*<span class="number">10</span>+i)%<span class="number">2520</span>;</span><br><span class="line">		<span class="keyword">int</span> nlm=lm;</span><br><span class="line">		<span class="keyword">if</span>(i) nlm=<span class="built_in">lcm</span>(i,lm);</span><br><span class="line">		ans+=<span class="built_in">dfs</span>(pos<span class="number">-1</span>,nlm,now,lim&amp;&amp;i==a[pos]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!lim)&#123;</span><br><span class="line">		dp[pos][mp[lm]][num]=ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(x)&#123;</span><br><span class="line">		a[len++]=x%<span class="number">10</span>;</span><br><span class="line">		x/=<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">dfs</span>(len<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	cin&gt;&gt;T;</span><br><span class="line">	<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2520</span>;++i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="number">2520</span>%i==<span class="number">0</span>)&#123;</span><br><span class="line">			mp[i]=++cnt;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		ll a,b;</span><br><span class="line">		cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">		cout&lt;&lt;<span class="built_in">solve</span>(b)-<span class="built_in">solve</span>(a<span class="number">-1</span>)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>线段树题目选练</title>
    <url>/20211117/%E7%BA%BF%E6%AE%B5%E6%A0%91%E9%A2%98%E7%9B%AE%E9%80%89%E7%BB%83/</url>
    <content><![CDATA[<h1 id="the-2021-ccpc-guilin-b">The 2021 CCPC Guilin B</h1>
<p>A Plus B Problem</p>
<p>维护区间后缀0/9的数量。</p>
<p>不用二分+线段树（维护区间0/9的数量）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> l,r,s0,s9,v;</span><br><span class="line">	<span class="keyword">bool</span> t0,t9;</span><br><span class="line">&#125;t[N];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R(x) (x&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (t[x].r-t[x].l+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid(x) (t[x].l+t[x].r&gt;&gt;1)</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][N],c[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">sz</span>(<span class="built_in">R</span>(o))==t[<span class="built_in">R</span>(o)].s0)&#123;</span><br><span class="line">		t[o].s0=t[<span class="built_in">L</span>(o)].s0+t[<span class="built_in">R</span>(o)].s0;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		t[o].s0=t[<span class="built_in">R</span>(o)].s0;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">sz</span>(<span class="built_in">R</span>(o))==t[<span class="built_in">R</span>(o)].s9)&#123;</span><br><span class="line">		t[o].s9=t[<span class="built_in">L</span>(o)].s9+t[<span class="built_in">R</span>(o)].s9;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		t[o].s9=t[<span class="built_in">R</span>(o)].s9;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">	t[o].l=L;t[o].r=R;</span><br><span class="line">	<span class="keyword">if</span>(L==R)&#123;</span><br><span class="line">		t[o].s0=(c[L]==<span class="number">0</span>);</span><br><span class="line">		t[o].s9=(c[L]==<span class="number">9</span>);</span><br><span class="line">		t[o].v=c[L];</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> M=L+R&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(<span class="built_in">L</span>(o),L,M);</span><br><span class="line">	<span class="built_in">build</span>(<span class="built_in">R</span>(o),M+<span class="number">1</span>,R);</span><br><span class="line">	<span class="built_in">upd</span>(o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ds9</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">	t[o].t9=<span class="number">1</span>;</span><br><span class="line">	t[o].t0=<span class="number">0</span>;</span><br><span class="line">	t[o].s0=<span class="number">0</span>;</span><br><span class="line">	t[o].s9=<span class="built_in">sz</span>(o);</span><br><span class="line">	t[o].v=<span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ds0</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">	t[o].t0=<span class="number">1</span>;</span><br><span class="line">	t[o].t9=<span class="number">0</span>;</span><br><span class="line">	t[o].s0=<span class="built_in">sz</span>(o);</span><br><span class="line">	t[o].s9=<span class="number">0</span>;</span><br><span class="line">	t[o].v=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spread</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(t[o].t0)&#123;</span><br><span class="line">		<span class="built_in">ds0</span>(<span class="built_in">L</span>(o));</span><br><span class="line">		<span class="built_in">ds0</span>(<span class="built_in">R</span>(o));</span><br><span class="line">		t[o].t0=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(t[o].t9)&#123;</span><br><span class="line">		<span class="built_in">ds9</span>(<span class="built_in">L</span>(o));</span><br><span class="line">		<span class="built_in">ds9</span>(<span class="built_in">R</span>(o));</span><br><span class="line">		t[o].t9=<span class="number">0</span>;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask9</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">sz</span>(o)==t[o].s9) <span class="keyword">return</span> <span class="built_in">min</span>(p,t[o].r)-t[o].l+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(t[o].l==t[o].r) <span class="keyword">return</span> t[o].v==<span class="number">9</span>;</span><br><span class="line">	<span class="built_in">spread</span>(o);</span><br><span class="line">	<span class="keyword">int</span> M=<span class="built_in">mid</span>(o);</span><br><span class="line">	<span class="keyword">if</span>(p&gt;M)&#123;</span><br><span class="line">		<span class="keyword">int</span> len=<span class="built_in">ask9</span>(<span class="built_in">R</span>(o),p);</span><br><span class="line">		<span class="keyword">if</span>(len==<span class="built_in">min</span>(t[<span class="built_in">R</span>(o)].r,p)-t[<span class="built_in">R</span>(o)].l+<span class="number">1</span>)&#123;</span><br><span class="line">			len+=<span class="built_in">ask9</span>(<span class="built_in">L</span>(o),p);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> len;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">ask9</span>(<span class="built_in">L</span>(o),p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask0</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">sz</span>(o)==t[o].s0) <span class="keyword">return</span> <span class="built_in">min</span>(p,t[o].r)-t[o].l+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(t[o].l==t[o].r) <span class="keyword">return</span> t[o].v==<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">spread</span>(o);</span><br><span class="line">	<span class="keyword">int</span> M=<span class="built_in">mid</span>(o);</span><br><span class="line">	<span class="keyword">if</span>(p&gt;M)&#123;</span><br><span class="line">		<span class="keyword">int</span> len=<span class="built_in">ask0</span>(<span class="built_in">R</span>(o),p);</span><br><span class="line">		<span class="keyword">if</span>(len==<span class="built_in">min</span>(t[<span class="built_in">R</span>(o)].r,p)-t[<span class="built_in">R</span>(o)].l+<span class="number">1</span>)&#123;</span><br><span class="line">			len+=<span class="built_in">ask0</span>(<span class="built_in">L</span>(o),p);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> len;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">ask0</span>(<span class="built_in">L</span>(o),p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p==t[o].l&amp;&amp;t[o].r==p)&#123;</span><br><span class="line">		<span class="keyword">return</span> t[o].v;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">spread</span>(o);</span><br><span class="line">	<span class="keyword">int</span> M=<span class="built_in">mid</span>(o);</span><br><span class="line">	<span class="keyword">if</span>(p&lt;=M)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">ask</span>(<span class="built_in">L</span>(o),p);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">ask</span>(<span class="built_in">R</span>(o),p);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=t[o].l&amp;&amp;t[o].r&lt;=R)&#123;</span><br><span class="line">		t[o].v=v;</span><br><span class="line">		<span class="keyword">if</span>(v==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="built_in">ds0</span>(o);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(v==<span class="number">9</span>)&#123;</span><br><span class="line">			<span class="built_in">ds9</span>(o);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			t[o].t0=<span class="number">0</span>;</span><br><span class="line">			t[o].t9=<span class="number">0</span>;</span><br><span class="line">			t[o].s0=<span class="number">0</span>;</span><br><span class="line">			t[o].s9=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> M=<span class="built_in">mid</span>(o);</span><br><span class="line">	<span class="built_in">spread</span>(o);</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=M)&#123;</span><br><span class="line">		<span class="built_in">change</span>(<span class="built_in">L</span>(o),L,R,v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(M&lt;R)&#123;</span><br><span class="line">		<span class="built_in">change</span>(<span class="built_in">R</span>(o),L,R,v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">upd</span>(o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">2</span>][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,q;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;q);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>,s[<span class="number">0</span>]+<span class="number">1</span>,s[<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		a[<span class="number">0</span>][i]=s[<span class="number">0</span>][i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		a[<span class="number">1</span>][i]=s[<span class="number">1</span>][i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> jin=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;<span class="number">0</span>;--i)&#123;</span><br><span class="line">		c[i]=a[<span class="number">0</span>][i]+a[<span class="number">1</span>][i]+jin;</span><br><span class="line">		jin=c[i]/<span class="number">10</span>;</span><br><span class="line">		c[i]%=<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="keyword">int</span> r,x,v;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;r,&amp;x,&amp;v);</span><br><span class="line">		--r;</span><br><span class="line">		<span class="keyword">int</span> d=v-a[r][x];</span><br><span class="line">		a[r][x]=v;</span><br><span class="line">		<span class="keyword">if</span>(d==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d 0\n&quot;</span>,<span class="built_in">ask</span>(<span class="number">1</span>,x));</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> tmp=<span class="built_in">ask</span>(<span class="number">1</span>,x);</span><br><span class="line">		<span class="keyword">int</span> val=tmp+d;</span><br><span class="line">		<span class="keyword">if</span>(val&gt;=<span class="number">0</span>&amp;&amp;val&lt;=<span class="number">9</span>)&#123;</span><br><span class="line">			<span class="built_in">change</span>(<span class="number">1</span>,x,x,val);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d 2\n&quot;</span>,val);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(val&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">				<span class="built_in">change</span>(<span class="number">1</span>,x,x,val<span class="number">-10</span>);</span><br><span class="line">				<span class="keyword">int</span> len=<span class="built_in">ask9</span>(<span class="number">1</span>,x<span class="number">-1</span>);</span><br><span class="line">				<span class="keyword">if</span>(len)&#123;</span><br><span class="line">					<span class="built_in">change</span>(<span class="number">1</span>,x-len,x<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(x-len<span class="number">-1</span>&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,val<span class="number">-10</span>,<span class="number">3</span>+len);</span><br><span class="line">					<span class="built_in">change</span>(<span class="number">1</span>,x-len<span class="number">-1</span>,x-len<span class="number">-1</span>,<span class="built_in">ask</span>(<span class="number">1</span>,x-len<span class="number">-1</span>)+<span class="number">1</span>);</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,val<span class="number">-10</span>,<span class="number">2</span>+len);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="built_in">change</span>(<span class="number">1</span>,x,x,val+<span class="number">10</span>);</span><br><span class="line">				<span class="keyword">int</span> len=<span class="built_in">ask0</span>(<span class="number">1</span>,x<span class="number">-1</span>);</span><br><span class="line">				<span class="keyword">if</span>(len)&#123;</span><br><span class="line">					<span class="built_in">change</span>(<span class="number">1</span>,x-len,x<span class="number">-1</span>,<span class="number">9</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(x-len<span class="number">-1</span>&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,val+<span class="number">10</span>,<span class="number">3</span>+len);</span><br><span class="line">					<span class="built_in">change</span>(<span class="number">1</span>,x-len<span class="number">-1</span>,x-len<span class="number">-1</span>,<span class="built_in">ask</span>(<span class="number">1</span>,x-len<span class="number">-1</span>)<span class="number">-1</span>);</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,val+<span class="number">10</span>,<span class="number">2</span>+len);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; </span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="uva11992-fast-matrix-operations">UVA11992 Fast Matrix Operations</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> R=<span class="number">21</span>,C=<span class="number">1e6</span>+<span class="number">500</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> l,r,sum,max,min,add,set;</span><br><span class="line">	<span class="keyword">bool</span> f;</span><br><span class="line">&#125;t[R][C*<span class="number">2</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R(x) (x&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(i,x) (t[i][x].r-t[i][x].l+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid(i,x) (t[i][x].l+t[i][x].r&gt;&gt;1)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    t[i][o].sum=t[i][<span class="built_in">L</span>(o)].sum+t[i][<span class="built_in">R</span>(o)].sum;</span><br><span class="line">    t[i][o].max=<span class="built_in">max</span>(t[i][<span class="built_in">L</span>(o)].max,t[i][<span class="built_in">R</span>(o)].max);</span><br><span class="line">    t[i][o].min=<span class="built_in">min</span>(t[i][<span class="built_in">L</span>(o)].min,t[i][<span class="built_in">R</span>(o)].min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildt</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> o,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    t[i][o].l=L,t[i][o].r=R;</span><br><span class="line">    t[i][o].sum=t[i][o].max=t[i][o].min=t[i][o].add=t[i][o].set=t[i][o].f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L==R)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> M=L+R&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">buildt</span>(i,<span class="built_in">L</span>(o),L,M);</span><br><span class="line">    <span class="built_in">buildt</span>(i,<span class="built_in">R</span>(o),M+<span class="number">1</span>,R);</span><br><span class="line">    <span class="built_in">upd</span>(i,o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">stx</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> o,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	t[i][o].f=<span class="number">1</span>;</span><br><span class="line">	t[i][o].max=t[i][o].min=t[i][o].set=v;</span><br><span class="line">	t[i][o].sum=<span class="built_in">sz</span>(i,o)*v;</span><br><span class="line">	t[i][o].add=<span class="number">0</span>;<span class="comment">//set会清除add标记 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">adx</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> o,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	t[i][o].add+=v;</span><br><span class="line">	t[i][o].sum+=<span class="built_in">sz</span>(i,o)*v;</span><br><span class="line">	t[i][o].max+=v;</span><br><span class="line">	t[i][o].min+=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spread</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[i][o].f)&#123; <span class="comment">//先set再add </span></span><br><span class="line">    	<span class="keyword">int</span> &amp;v=t[i][o].set;</span><br><span class="line">    	<span class="built_in">stx</span>(i,<span class="built_in">L</span>(o),v);</span><br><span class="line">    	<span class="built_in">stx</span>(i,<span class="built_in">R</span>(o),v);</span><br><span class="line">    	t[i][o].f=<span class="number">0</span>;</span><br><span class="line">    	v=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t[i][o].add)&#123;</span><br><span class="line">    	<span class="keyword">int</span> &amp;v=t[i][o].add;</span><br><span class="line">    	<span class="built_in">adx</span>(i,<span class="built_in">L</span>(o),v);</span><br><span class="line">    	<span class="built_in">adx</span>(i,<span class="built_in">R</span>(o),v);</span><br><span class="line">    	v=<span class="number">0</span>;</span><br><span class="line">    	t[i][o].add=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> o,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=t[i][o].l&amp;&amp;t[i][o].r&lt;=R)&#123;</span><br><span class="line">		<span class="built_in">adx</span>(i,o,v);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">spread</span>(i,o);</span><br><span class="line">	<span class="keyword">int</span> M=<span class="built_in">mid</span>(i,o);</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=M)&#123;</span><br><span class="line">		<span class="built_in">add</span>(i,<span class="built_in">L</span>(o),L,R,v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(M&lt;R)&#123;</span><br><span class="line">		<span class="built_in">add</span>(i,<span class="built_in">R</span>(o),L,R,v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">upd</span>(i,o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> o,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=t[i][o].l&amp;&amp;t[i][o].r&lt;=R)&#123;</span><br><span class="line">		<span class="built_in">stx</span>(i,o,v);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">spread</span>(i,o);</span><br><span class="line">	<span class="keyword">int</span> M=<span class="built_in">mid</span>(i,o);</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=M)&#123;</span><br><span class="line">		<span class="built_in">change</span>(i,<span class="built_in">L</span>(o),L,R,v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(M&lt;R)&#123;</span><br><span class="line">		<span class="built_in">change</span>(i,<span class="built_in">R</span>(o),L,R,v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">upd</span>(i,o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> _min=<span class="number">2e9</span>,_max=<span class="number">-2e9</span>,_sum=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> o,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=t[i][o].l&amp;&amp;t[i][o].r&lt;=R)&#123;</span><br><span class="line">		_min=<span class="built_in">min</span>(_min,t[i][o].min);</span><br><span class="line">		_max=<span class="built_in">max</span>(_max,t[i][o].max);</span><br><span class="line">		_sum+=t[i][o].sum;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> M=<span class="built_in">mid</span>(i,o);</span><br><span class="line">	<span class="built_in">spread</span>(i,o);</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=M)&#123;</span><br><span class="line">		<span class="built_in">ask</span>(i,<span class="built_in">L</span>(o),L,R);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(M&lt;R)&#123;</span><br><span class="line">		<span class="built_in">ask</span>(i,<span class="built_in">R</span>(o),L,R);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  	<span class="keyword">int</span> op,x1,y1,x2,y2,r,c,q;</span><br><span class="line">  	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;r,&amp;c,&amp;q))&#123;</span><br><span class="line">	  	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r;++i)&#123;</span><br><span class="line">	  		<span class="built_in">buildt</span>(i,<span class="number">1</span>,<span class="number">1</span>,c);</span><br><span class="line">	  	&#125;</span><br><span class="line">		<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d%d&quot;</span>,&amp;op,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">			<span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">				<span class="keyword">int</span> v;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v);</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=x1;i&lt;=x2;++i)&#123;</span><br><span class="line">					<span class="built_in">add</span>(i,<span class="number">1</span>,y1,y2,v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)&#123;</span><br><span class="line">				<span class="keyword">int</span> v;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v);</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=x1;i&lt;=x2;++i)&#123;</span><br><span class="line">					<span class="built_in">change</span>(i,<span class="number">1</span>,y1,y2,v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				_min=<span class="number">2e9</span>,_max=<span class="number">-2e9</span>,_sum=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=x1;i&lt;=x2;++i)&#123;</span><br><span class="line">					<span class="built_in">ask</span>(i,<span class="number">1</span>,y1,y2);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>,_sum,_min,_max);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">  	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
